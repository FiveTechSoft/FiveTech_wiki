SetWindowPos()


SetWindowPos()
 Previous  Top  Next

Changes the size, position, and Z order of a child, pop-up, or top-level
window.

====== Sintaxis ======

 


 SetWindowPos( <hWnd>, <hWndInsertAfter>, <nRow>, <nCol>, <nWidth>,
<nHeight>, <nFlags> ) --> lSuccess 


 


 
====== Parámetros ======


 <hWnd> The handle of the window. 


 


 <hWndInsertAfter> Handle to the window to precede the positioned window
in the Z order. This parameter must be a window handle or one of the
following values: 


 


 
   HWND_BOTTOM   Places the window at the bottom of the Z order. If the
hWnd parameter identifies a topmost window, the window loses its topmost
status and is placed at the bottom of all other windows.
   HWND_NOTOPMOST   Places the window above all non-topmost windows (that
is, behind all topmost windows). This flag has no effect if the window is
already a non-topmost window.
   HWND_TOP      Places the window at the top of the Z order.
   HWND_TOPMOST   Places the window above all non-topmost windows. The
window maintains its topmost position even when it is deactivated.   

 


 <nRow> Specifies the new position of the left side of the window. 


 


 <nCol> Specifies the new position of the top of the window. 


 


 <nWidth> Specifies the new width of the window. 


 


 <nHeight> Specifies the new height of the window. 


 


 <nFlags> Specifies the window sizing and positioning flags. This
parameter can be a combination of the following values: 


 


 
   SWP_ASYNCWINDOWPOS   If the calling thread and the thread that owns
the window are attached to different input queues, the system posts the
request to the thread that owns the window. This prevents the calling
thread from blocking its execution while other threads process the
request.
   SWP_DEFERERASE      Prevents generation of the WM_SYNCPAINT message.  
 
   SWP_DRAWFRAME      Draws a frame (defined in the window's class
description) around the window.
   SWP_FRAMECHANGED   Applies new frame styles set using the
SetWindowLong function. Sends a WM_NCCALCSIZE message to the window, even
if the window's size is not being changed. If this flag is not specified,
WM_NCCALCSIZE is sent only when the window's size is being changed.
   SWP_HIDEWINDOW      Hides the window.   
   SWP_NOACTIVATE      Does not activate the window. If this flag is not
set, the window is activated and moved to the top of either the topmost
or non-topmost group (depending on the setting of the hWndInsertAfter
parameter).
   SWP_NOCOPYBITS      Discards the entire contents of the client area.
If this flag is not specified, the valid contents of the client area are
saved and copied back into the client area after the window is sized or
repositioned.
   SWP_NOMOVE      Retains the current position (ignores the X and Y
parameters).
   SWP_NOOWNERZORDER   Does not change the owner window's position in the
Z order.
   SWP_NOREDRAW      Does not redraw changes. If this flag is set, no
repainting of any kind occurs. This applies to the client area, the
nonclient area (including the title bar and scroll bars), and any part of
the parent window uncovered as a result of the window being moved. When
this flag is set, the application must explicitly invalidate or redraw
any parts of the window and parent window that need redrawing.
   SWP_NOREPOSITION      Same as the SWP_NOOWNERZORDER flag.
   SWP_NOSENDCHANGING   Prevents the window from receiving the
WM_WINDOWPOSCHANGING message.
   SWP_NOSIZE         Retains the current size (ignores the cx and cy
parameters).
   SWP_NOZORDER      Retains the current Z order (ignores the
hWndInsertAfter parameter).
   SWP_SHOWWINDOW      Displays the window.   

 


 
====== Devuelve ======


 <lSuccess> .t. if the function was successful, otherwise .f.. 


 


 
====== Ejemplo ======

 


 SAMPLES\TESTTOP.PRG 


 


 
Source code:

 


 SOURCE\WINAPI\WNDPOS.C 


 



====== Ver también ======
