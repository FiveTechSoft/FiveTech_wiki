ExtTextOut()



ExtTextOut()

 Previous  Top  Next

Writes a character string into a rectangular region.

====== Sintaxis ======


 ExtTextOut( <hDC>, <nRow>, <nCol>, <aRect>, <cText>, <nStyle> ) -->
lSucess 


 


 This function writes a character string within a rectangular region,
using the currently selected font. 


 

====== Par�metros ======


 <hDC> The handle of the device context. 


 


 <nRow>, <nCol> The coordinates where to paint inside the rect specified
in aRect. 


 


 <aRect> A 4 elements Clipper array, representing a rect: nTop, nLeft,
nBottom, nRight 


 


 <cText> The text to draw. 


 


 <nStyle> Specifies how to use the application-defined rectangle. This
parameter can be one or more of the following values: 


 


 
ETO_CLIPPED         The text will be clipped to the rectangle.   
ETO_GLYPH_INDEX      The lpString array refers to an array returned from
GetCharacterPlacement and should be parsed directly by GDI as no further
language-specific processing is required. Glyph indexing only applies to
TrueType fonts, but the flag can be used for bitmap and vector fonts to
indicate that no further language processing is necessary and GDI should
process the string directly. Note that all glyph indexes are 16-bit
values even though the string is assumed to be an array of 8-bit values
for raster fonts. For ExtTextOutW, the glyph indexes are saved to a
metafile. However, to display the correct characters the metafile must be
played back using the same font. For ExtTextOutA, the glyph indexes are
not saved.
ETO_NUMERICSLATIN      To display numbers, use European digits.   
ETO_NUMERICSLOCAL      To display numbers, use digits appropriate to the
locale.   
ETO_OPAQUE         The current background color should be used to fill
the rectangle.   
ETO_PDY         When this is set, the array pointed to by lpDx contains
pairs of values. The first value of each pair is, as usual, the distance
between origins of adjacent character cells, but the second value is the
displacement along the vertical direction of the font.   
ETO_RTLREADING      Middle-Eastern Windows: If this value is specified
and a Hebrew or Arabic font is selected into the device context, the
string is output using right-to-left reading order. If this value is not
specified, the string is output in left-to-right order. The same effect
can be achieved by setting the TA_RTLREADING value in SetTextAlign. This
value is preserved for backward compatability   

 


 
====== Devuelve ======


 <lSuccess> A logical value indicating if the operation was successful. 


 

====== C�digo fuente ======


 SOURCE\WINAPI\Text.c 


 

See also:

   TextOut() DrawText()


====== Ver tambi�n ======
