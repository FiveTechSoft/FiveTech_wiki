Temporizadores de Windows 

====== DATA ======
|bAction  |La acción que debe realizarse en cada intervalo de tiempo |
|lActive  |Si el temporizador está activo actualmente    |
|nId      |identificador de la API del temporizador  |
|nInterval|Intervalo de cada acción en 1/1000 segundos    |
|hWndOwner|Objecto Contenedor del timer |
|Cargo    |Ranura de carga genéricas |

====== METODOS ======
|New       |Metodo Constructor TTimer:New( nInterval, bAction, oWnd )     |
|Activate  |Activador del timer TTimer:Activate()  |
|DeActivate|Desactiva el timer TTimer:DeActivate()  |   
|End       |Destruye el timer TTimer:End()  |

====== EJEMPLOS ======
FWH\SAMPLES\TESTTIME.PRG
<code clipper>
// Using Timers. Timers are also Objects!

#include "FiveWin.ch"

static oWnd, oTimer

//----------------------------------------------------------------------------//

function Main()

   DEFINE WINDOW oWnd FROM 3, 3 TO 20, 50 ;
      TITLE OemToAnsi( "Testing timers" ) ;
      MENU  BuildMenu()

   SET MESSAGE OF oWnd TO "Controlling time events..."

   ACTIVATE WINDOW oWnd

return nil

//----------------------------------------------------------------------------//

function BuildMenu()

   local oMenu

   MENU oMenu
      MENUITEM "&Timers"
      MENU
         MENUITEM "&Build a Timer" ACTION Timers()
         SEPARATOR
         MENUITEM "&Bye, bye..."   ACTION oWnd:End()
      ENDMENU
   ENDMENU

return oMenu

//----------------------------------------------------------------------------//

function Timers()

   if oTimer == nil
      DEFINE TIMER oTimer ACTION oWnd:Say( 2, 2, Time() )
      ACTIVATE TIMER oTimer
   else
      Alert( "There is already a working timer..." )
   endif

return nil

//----------------------------------------------------------------------------//
</code>

FWH/SAMPLES/TESTTIM2.PRG
<code clipper>
// Using Time-Class Objects
// Time Objects may be used also from MsDos

#include "FiveWin.ch"

//----------------------------------------------------------------------------//

function Main()

   local oTime1 := TTime():System()
   local oTime2 := TTime():New( 8, 20 )

   MsgInfo( "System time: " + oTime1:cGetTime() + CRLF + ;
            "Test time:   " + oTime2:cGetTime() + CRLF + ;
            "=================="                + CRLF + ;
            "Difference:  " + oTime1:cSub( oTime2 ) )

return nil

//----------------------------------------------------------------------------//
</code>

====== CODIGO FUENTE ======
FWH\SOURCES\CLASSES\TIMER.PRG