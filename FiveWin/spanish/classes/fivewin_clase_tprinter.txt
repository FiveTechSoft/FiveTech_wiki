====== Clase TPrinter ======

Manejo de la impresora como Objeto

====== DATOS ======
^hDC|Handle of the Device Context of the Impresora|
^hDCOut|Handle of the current metafile in use if file output specified|
^aMeta|Arrays of metafiles names generated in disk|
^cDevice|The name of the output device|
^cDocument|The name of the spooler document|
^cDriver|The name of the Impresora driver in use|
^cModel|Alternative Impresora to use|
^cPort|The name of the port used|
^cDir|The path for the metafiles storage. By default TEMP|
^nPage|The page currently printed|
^nXOffset|Coordinates of the virtual page origin|
^nYOffset|Coordinates of the virtual page origin|
^nPad|Default pad for all the Say instructions: \\ #define define PAD_LEFT   0 \\ #define define PAD_RIGHT   1 \\ #define define PAD_CENTER   2|
^nOrient|Default orientation for the printed page: \\ #define define DMORIENT_PORTRAIT      0 \\ #define define DMORIENT_LANDSCAPE   1|
^lModified|If the Impresora device handle should be initialized again|
^lMeta|If the output has to go to metafiles in disk|
^lStarted|If the printing already started|
^lPrvModal|If the preview window should be executed in modal mode|
^oFont|Default font to use for printing|











====== METODOS ======

^New|Constructor from source code|
|  |**Sintaxis:** \\ TPrinter():New( <cDocument>, <lUser>, <lMeta>, <cModel>, <lModal>)|
|  |**Parámetros:** \\ **<cDocument>** The name to assign to cDocument DATA, which it is the name of the spooler document to generate \\ **<lUser>** To let the user interactively select the Impresora to use. \\ **<lMeta>** To PREVIEW the printout work. \\ **<cModel>** To select a different Impresora from the default one. It is the name of any Impresora installed in the system, \\ (FiveWin PrintBegin() function generates this name from a partial name or from an index name). See Impresora xBase Commands for a sample. \\ **<lModal>** If the preview window should be executed in modal mode|
^End|Destroys the current Impresora object|
|  |**Sintaxis:** \\ <oPrn>:End() This method should be used to release the current Impresora object and all its associated handles. It is the latest operation to perform with a Impresora object. \\ **Warning:** The Impresora object does not destroy any related font you may have created. You must destroy the fonts you create for the Impresora: \\ DEFINE FONT oFont NAME ... SIZE ... OF oPrn oFont:End() //Destroy the font//|
^EndPage|Ends the actual printed page.|
|  |**Sintaxis:** \\ <oPrn>:EndPage() This method completes the current page. Once you do it, there is no way to perform any further printing on this same page.|
^FillRect|Fills a rectangle with a specified brush object.|
|  |**Sintaxis:** \\ <oPrn>:FillRect( <aRect>, <oBrush> )|
|  |**Parámetros:** \\ **<aRect>** It is an array with the rectangle dimensions: { nTop, nLeft, nBottom, nRight } \\ **<oBrush>** It is the brush object to use for filling the rectangle area. To create the brush use: DEFINE BRUSH oBrush ...|
^Arc|Draws an elliptical arc.|
|  |**Sintaxis:** \\ <oPrn>:Arc( <nTop>, <nLeft>, <nBottom>, <nRight>, <nXB>, <nYB>, <nXE>,<nYE>, <oPen> )|
|  |**Parámetros:** \\ **<nTop>, <nLeft>, <nBottom>,<nRight>** The coordinates of the bounding rectangle. By default they  are expressed in pixels, unless a different SetMapMode() mode is selected.  \\ **<nXB>** The X coordinate of the ending point of the radial line defining the starting point of the arc. \\ **<nYB>** The Y coordinate of the ending point of the radial line defining the starting point of the arc. \\ **<nXE>** The X coordinate of the ending point of the radial line defining the ending point of the arc. \\ **<nYE>** The Y coordinate of the ending point of the radial line defining the ending point of the arc. \\ **<oPen>** It is an optional pen object to use for painting the arc. To create it use: DEFINE PEN oPen STYLE ... COLOR ... WIDTH ... \\ **Devuelve:** \\ A logical value indicating if the operation was successfully performed.|
^Box|Draws a box.|
|  |**Sintaxis:** \\ <oPrn>:Box( <nTop>, <nLeft>, <nBottom>, <nRight>, <oPen> )|
|  |**Parámetros:** \\ **<nTop>,<nLeft>,<nBottom>,<nRight>** The coordinates of the box to draw. By default they are expressed in pixels, unless a different SetMapMode() mode is selected. \\ **<oPen>** It is an optional pen object to use for painting the box. To create it use: DEFINE PEN oPen STYLE ... COLOR ... WIDTH ... \\ **Devuelve:** \\ A logical value indicating if the operation was successfully performed.|
^Chord|Draws a chord.|
|  |**Sintaxis:** \\ <oPrn>:Chord( <nTop>, <nLeft>, <nBottom>, <nRight>, <nXB>, <nYB>, <nXE>, <nYE>, <oPen> )|
|  |**Parámetros:** \\ **<nTop>, <nLeft>, <nBottom>,<nRight>**  The coordinates of the bounding rectangle. By default they are expressed in pixels, unless a different SetMapMode() mode is selected. \\ **<nXB>** The X coordinate of the ending point of the radial line defining the beginning of the chord. \\ **<nYB>** The Y coordinate of the ending point of the radial line defining the beginning of the chord. \\ **<nXE>** The X coordinate of the ending point of the radial line defining the end of the chord. \\ **<nYE>** The Y coordinate of the ending point of the radial line defining the end of the chord. \\ **<oPen>** It is an optional pen object to use for painting the chord. To create it use: DEFINE PEN oPen STYLE ... COLOR ... WIDTH ... \\ **Devuelve:** \\ A logical value indicating if the operation was successfully performed.|
^CmRect2Pix|Converts a rect from centimeters coordinates into pixels coordinates|
|  |**Sintaxis:** \\ <oPrn>:CmRect2Pix( <aRect> ) -> <aPoint> |
|  |**Parámetros:** \\ <aRect> The rect in centimeters coordinates. \\ **Devuelve:** \\ <aPoint> The new rect in pixel coordinates|
^Cmtr2Pix|Converts a centimeters coordinates into pixels coordinates|
|  |**Sintaxis:** \\ <oPrn>:Cmtr2Pix( <@nRow>, <@nCol> ) -> <aPoint> |
|  |**Parámetros:** \\ **<nRow>,<nCol>** The centimeters coordinates as numeric values. \\ **Devuelve:** \\ <aPoint> An array with the new point in pixel coordinates: <nowiki>{||nTop,|nLeft }</nowiki>|
^DraftMode|Select the draft mode for speed up the printing|
|  |**Sintaxis:** \\ <oPrn>:DraftMode( <lOnOff> ) -> <nRetCode>|
|  |**Parámetros:** \\ <lOnOff> A logical value to turn on or off the draft mode. \\ **Devuelve:** \\ A numeric value indicating if the operation was successfully performed: \\ Positive   The operation was successful \\ Negative   It was not performed|
^Ellipse|Draws an ellipse.|
|  |**Sintaxis:** \\ <oPrn>:Ellipse( <nTop>, <nLeft>, <nBottom>, <nRight>, <oPen> )|
|  |**Parámetros:** \\ **<nTop>, <nLeft>, <nBottom>, <nRight>**  The coordinates of the bounding rectangle. By default they  are expressed in pixels, unless a different SetMapMode() mode is selected. \\ **<oPen>** It is an optional pen object to use for painting the ellipse. To create it use: DEFINE PEN oPen STYLE ... COLOR ... WIDTH ... \\ **Devuelve:** \\ A logical value indicating if the operation was successfully performed.|
^GetCopies|Retrieves the number of copies for page selected on the printer dialog|
|  |**Sintaxis:** \\ <oPrn>:GetCopies() -> <nCopies> |
|  |**Parámetros:** \\ None \\ **Devuelve:** \\ A numeric value indicating the number of copies|
^GetDriver|Retrieves the driver name of the Impresora object|
|  |**Sintaxis:** \\ <oPrn>:GetDriver()|
|  |**Parámetros:** \\ None \\ **Devuelve:** \\ Name of driver|
^GetOrientation|Retrieves the Impresora orientation.|
|  |**Sintaxis:** \\ <oPrn>:GetOrientation() -> <nOrientation> |
|  |**Parámetros:** \\ None \\ **Devuelve:** \\ A numeric value indicating the orientation type: \\ 1   Portrait  \\ 2 LandScape|
^GetPages|Retrieves the From & To pages selected on the Impresora dialog|
|  |**Sintaxis:** \\ <oPrn>:GetPages([@nFrom], [@nTo]) -> <{nFrom, nTo}> |
|  |**Parámetros:** \\ nFrom and nTo passed by reference (Optional) \\ **Devuelve:** \\ A two dimensions array with the nFrom and nTo values|
^GetPhySize|Retrieves the paper physical dimensions|
|  |**Sintaxis:** \\ <oPrn>:GetPhySize() -> <aSize>|
|  |**Parámetros:** \\ None \\ **Devuelve:** \\ An array with the dimensions of the paper: {nHeight ,nWidth}|
^GetPixel|Gets and optionally sets the color of a given pixel|
|  |**Sintaxis:** \\ <oPrn>:GetPixel( <nRow>, <nCol>, <nRGBColor> )|
|  |**Parámetros:** \\ **<nRow>,<nCol> **The coordinates of the pixel.  \\ **<nRGBColor>** The optional new color for the pixel. \\ **Devuelve:** \\ The current color of the pixel|
^GetPort|Retrieves the port of the Impresora object|
|  |**Sintaxis:** \\ <oPrn>:GetPort()|
|  |**Parámetros:** \\ None \\ **Devuelve:** \\  Name of port|
^GetTextHeight|Retrieves text Height for a specific font object|
|  |**Sintaxis:** \\ <oPrn>:GetTextHeight( <cText>, <oFont> ) -> <nHeight>|
|  |**Parámetros:** \\ **<cText>** The text to retrieve its height. \\ **<oFont>** A font object. By default it uses the default font oFont of the Impresora object. To create it use: DEFINE FONT oFont NAME ... SIZE ... \\ **Devuelve:** \\ The height for that specified font. In fact, this height it is not depending on the text, but just on the font object.|
^GetTextWidth|Retrieves text Width for a specific font object|
|  |**Sintaxis:** \\ <oPrn>:GetTextWidth( <cText>, <oFont> ) ->  <nWidth>|
|  |**Parámetros:** \\ **<cText>** The text to retrieve its width. **<oFont>** A font object. By default it uses the default font oFont of the Impresora object. To create it use: DEFINE FONT oFont NAME ... SIZE ... \\ **Devuelve:** \\ The width for that specified font.|
^ImportWMF|Imports a Windows metafile to be used as template|
|  |**Sintaxis:** \\ <oPrn>:ImportWMF( <cFile>, <lPlaceable> ) -> nil|
|  |**Parámetros:** \\ **<cFile>** The name of the Windows metafile WMF file to use as a template for printing. \\ **<lPlaceable>** If it is a placeable metafile. By default is .t.. \\ **Comments:** \\ This new powerful FiveWin feature lets you use i.e.: Corel Draw to design a form, later you save it as a Windows metafile WMF file and use it from the FiveWin Impresora object. \\ See SAMPLES\Corel.prg All the printed pages will show the metafile as their background, letting you place on it certain information. It is a very quick and easy way to design forms.|
^ImportRaw|Imports a RAW file|
|  |**Sintaxis:** \\ <oPrn>:ImportRAW( <cFile> )|
|  |**Parámetros:** \\ <cFile> The name of the RAW file to import|
^Inch2Pix|Converts a inches coordinates into pixels coordinates|
|  |**Sintaxis:** \\ <oPrn>:Inch2Pix( <nRow>, <nCol> ) -> <aPoint>|
|  |**Parámetros:** \\ **<nRow>,<nCol>** The inches coordinates as numeric values. \\ **Devuelve:** \\ <aPoint> An array with the new point in pixel coordinates: {nTop,nLeft }|
^Line|Draws a line.|
|  |**Sintaxis:** \\ <oPrn>:Line( <nTop>, <nLeft>, <nBottom>, <nRight>, <oPen> ) -> <lSuccess> |
|  |**Parámetros:** \\ **<nTop>, <nLeft>, <nBottom>, <nRight>** The coordinates of the line to draw. By default theyare expressed in pixels, unless a different SetMapMode() mode is selected . \\ **<oPen>** It is an optional pen object to use for painting the box To create it use: DEFINE PEN oPen STYLE ... COLOR ... WIDTH ... \\ **Devuelve:** \\ A logical value indicating if the operation was successfully performed.|
^nHorzRes|Retrieves the horizontal resolution.|
|  |**Sintaxis:** \\ <oPrn>:nHorzRes() -> <nHorzRes>|
|  |**Parámetros:** \\ None \\ **Devuelve:** \\ A numeric value indicating the horizontal resolution of the printer expressed in pixels.|
^nHorzSize|Retrieves the width of the physical dimensions|
|  |**Sintaxis:** \\ <oPrn>:nHorzSize() -> <nHorzSize>|
|  |**Parámetros:** \\ None \\ **Devuelve:** \\ A numeric value indicating the physical dimensions of the printer page expressed in millimeters.|
^nLogPixelX|Retrieves the number of pixels per logical inch|
|  |**Sintaxis:** \\ <oPrn>:nLogPixelX() -> <nPixels>|
|  |**Parámetros:** \\ None \\**Devuelve:** \\ A numeric value indicating the number of pixels per logical inch along the display width.|
^nLogPixelY|Retrieves the number of pixels per logical inch|
|  |**Sintaxis:**  \\ <oPrn>:nLogPixelY() -> <nPixels>|
|  |**Parámetros:** \\ None \\ **Devuelve:** \\ A numeric value indicating the number of pixels per logical inch along the display height.|
^nVertRes|Retrieves the height of the Impresora page in raster lines|
|  |**Sintaxis:** \\ <oPrn>:nVertRes() -> <nVertRes>|
|  |**Parámetros:** \\ None \\ **Devuelve:** \\ A numeric value indicating the vertical resolution of the printer in raster lines.|
^nVertSize|Retrieves the vertical dimensions in millimeters|
|  |**Sintaxis:** \\ <oPrn>:nVertSize() \\ <nVertSize>|
|  |**Parámetros:** \\ None \\**Devuelve:** \\ A numeric value indicating the vertical dimensions of the printer page in millimeters.|
^Pie|Draws a pie-shaped wedge bounded by the intersection of an ellipse and two radials.|
|  |**Sintaxis:** \\ <oPrn>:Pie( <nTop>, <nLeft>, <nBottom>, <nRight>, <nXStartArc>, <nYStartArc>, <nXEndArc>, <nYEndArc>, <oPen> )|
|  |**Parámetros:** \\ **<nTop>, <nLeft>, <nBottom>, <nRight>** The coordinates of the bounding rectangle. By default  they  are expressed in pixels, unless a different SetMapMode() mode is selected. \\ **<nXB>** The X coordinate of the ending point of the first radial. \\ **<nYB>** The Y coordinate of the ending point of the first radial. **<nXE>** The X coordinate of the ending point of the second radial. \\ **<nYE>** The Y coordinate of the ending point of the second adial. \\ **<oPen>** It is an optional pen object to use for painting the pie. To create it use: DEFINE PEN oPen STYLE ... COLOR ... WIDTH ... \\ **Devuelve:** \\ A logical value indicating if the operation was successfully performed.|
^Pix2Inch|Converts pixels coordinates into inches coordinates|
|  |**Sintaxis:** \\<oPrn>:Pix2Inch( <nRow>, <nCol> ) -> <aPoint>|
|  |**Parámetros:** \\ **<nRow>,<nCol>** The pixels coordinates as numeric values.  \\ **Devuelve:** \\ <aPoint> An array with the new point in inches coordinates: {nTop,nLeft }|
^Pix2Mmtr|Change from pixels to millimeters coordinates|
|  |**Sintaxis:** \\ <oPrn>:Pix2Mmtr( <nRow>, <nCol> ) -> <aPoint>|
|  |**Parámetros:** \\ **<nRow>, <nCol> ** The pixels coordinates as numeric values. \\ **Devuelve:** \\ <aPoint> An array with the new point in millimeters coordinates: {nTop, nLeft }|
^Preview|Make a preview of the print work|
|  |**Sintaxis:** \\ <oPrn>:Preview()|
|  |**Parámetros:** \\ None \\ **Devuelve:** \\ nil \\ **Observaciones:** \\ This method invokes the preview mode, which displays a window with a buttonbar, a visual page/s, to interactively let the user preview the print work and optionally to select what pages to finally send to the printer.|
^Rebuild|Rebuilds all the associated handles and files of the printer|
|  |**Sintaxis:** \\ <oPrn>:Rebuild() -> nil|
|  |**Parámetros:** \\ None \\ **Devuelve:** \\ Nothing \\ **Observaciones:** \\ Some Impresora methods require to rebuild the Impresora object to properly generate new handle values and also to reset the associated preview metafiles files array. \\ FiveWin Impresora object automatically invokes this method when it is required.|
^ResetDC|Updates the associated device handle of the Impresora object|
|  |**Sintaxis:** \\ <oPrn>:ResetDC() -> <hNewDC>|
|  |**Parámetros:** \\ None \\ **Devuelve:** \\ The handle of the original device context with updated values. \\ **Comments:** \\ FiveWin Impresora object automatically uses this method when an update of its device handle is required.|
^RoundBox|Draws a box with rounded corners.|
|  |**Sintaxis:** \\ <oPrn>:RoundBox( <nTop>, <nLeft>, <nBottom>, <nRight>, <nWidth>,<nHeight>, <oPen>, <nBGColor> )|
|  |**Parámetros:** \\ **<nTop>, <nLeft>, <nBottom>, <nRight>** The coordinates of the box to draw. By default they are expressed in pixels, unless a different SetMapMode() mode is selected. \\ **<nWidth>** The width of the ellipse used to draw the rounded corners. \\ **<nHeight>** The height of the ellipse used to draw the rounded corners. \\ **<oPen>** It is an optional pen object to  use for painting the box. \\ **<nBGColor>** It is an optional color to be used for the box background. To create it use: DEFINE PEN oPen STYLE ... COLOR ... WIDTH ... \\ **Devuelve:** \\ Nil.|
^Say|Prints a text at a certain coordinates.|
|  |**Sintaxis:** \\ <oPrn>:Say( <nRow>, <nCol>, <cText>, <oFont>, <nWidth>, <nClrText>, <nBkMode>, <nPad> )|
|  |**Parámetros:** \\ **<nRow>, <nCol>** The coordinates where to display a text. They aregraphical coordinates, and may be pixels, inches, millimeters, twips, etc... accordingly to the current SetMapMode() active on the device. Pixels are used by default. \\ **<cText>** The text to display. \\ **<oFont>** An optional font object to use for printing. \\ **<nWidth>** The total width of the text. By default it is the width of the text. \\ **<nClrText>** An optional color to use for printing the text. **<nBkMode>** A numeric value indicating how to mix the text with the background: \\ 1 Transparent \\ 2 Opaque \\ **<nPad>** A numeric value indicating how align the text to print: ( PAD_LEFT is used by default) \\ #define PAD_LEFT 0, \\ #define PAD_RIGHT 1, \\ #define PAD_CENTER 2|
^CmSay|Exactly as Say method but the coordinates are in centimeters|
^InchSay|Exactly as Say method but the coordinates are in inches|
^SayBitmap|Prints a Bitmap.|
|  |**Sintaxis:** \\ <oPrn>:SayBitmap( <nRow>, <nCol>, <xBitmap>, <nWidth>,<nHeight>, <nRaster>) -> nil|
|  |**Parámetros:** \\ ** <nRow> <nCol>** The start coordinates for the bitmap. By default they are expressed in pixels, unless a different SetMapMode() is used. \\ **<xBitmap>** A string with the name of the BMP file to print, if it exits, or the name of the bitmap resource or a numeric value with the resource identifier if the bitmap should be loaded from resources. \\ **<nHeight>, <nWidth>** The dimensions of the image to print original dimensions of the bitmap are used.. By default the operation to perform. Some of the possible values are: \\ <code clipper>#define MERGEPAINT   12255782 // 0xBB0226 </code> \\ <code clipper>#define SRCAND 8913094</code> \\ **<nRaster>** An optional numeric value indicating the kind of raster(to review all possible operations with bitmaps we strongly recommend a Graphics management Windows book)|
^SayImage|Prints any kind of Image.|
|  |**Sintaxis:** \\ <oPrn>:SayImage( <nRow>, <nCol>, <oImage>, <nWidth>, <nHeight>, <nRaster> ) -> nil|
|  |**Parámetros:** \\ **<nRow> <nCol>** The start coordinates for the bitmap. By default they are expressed in pixels, unless a different SetMapMode() is used. \\ **<xBitmap>** A string with the name of the BMP file to print, if it exits, or the name of the bitmap resource or a numeric value with the resource identifier if the bitmap should be loaded from resources. \\ **<nHeight>,<nWidth>** The dimensions of the image to print original dimensions of the bitmap are used.. By default the operation to perform. Some of the possible values are: \\ <code clipper>#define MERGEPAINT   12255782 // 0xBB0226 </code> \\ <code clipper> #define SRCAND 8913094</code> \\**<nRaster>** An optional numeric value indicating the kind of raster(to review all possible operations with bitmaps we strongly recommend a Graphics management Windows book)|
^SetAnisotropicMode|Set the anisotropic mode.|
|  |**Sintaxis:** \\ <oPrn>:SetAnisotropicMode() -> <nPrevMapMode>|
|  |**Parámetros:** \\ None \\**Devuelve:** \\ A numeric value indicating the previous map mode if this operation was successful. \\ **Comments:** Logical units are converted to arbitrary units with arbitrarily scaled axes. Setting the mapping mode to MM_ANISOTROPIC does not change the current window or viewport settings. \\ To change the units, orientation, and scaling, an application should use the SetWindowExt and SetViewportExt functions.|
^SetCopies|Set the number of copies to print.|
|  |**Sintaxis:** \\ <oPrn>:SetCopies()|
|  |**Parámetros:** \\ None \\ **Devuelve:** \\ Nothing|
^SetHiInchMode|Set the high inch mode.|
|  |**Sintaxis:** \\ <oPrn>:SetHiInchMode() -> <nPrevMapMode>|
|  |**Parámetros:** \\ None \\ **Devuelve:** \\ A numeric value indicating the previous map mode if this operation was successful. \\ **Comments:** \\ Each logical unit is converted to 0.001 inch. Positive x is to the right; positive y is up.|
^SetHiMetricMode|Set the high metric mode.|
|  |**Sintaxis:** \\ <oPrn>:SetHiMetricMode() -> <nPrevMapMode>|
|  |**Parámetros:** \\ None \\ **Devuelve:** \\ A numeric value indicating the previous map mode if this operation was successful. \\ **Comments:** \\ Each logical unit is converted to 0.01 millimeter. Positive x is to the right; positive y is up.|
^SetIsotropicMode|Set the Isotropic mode.|
|  |**Sintaxis:** \\ <oPrn>:SetIsotropicMode() -> <nPrevMapMode>|
|  |**Parámetros:** \\ None \\ **Devuelve:** \\ A numeric value indicating the previous map mode if this operation was successful. \\ **Comments:** \\ Logical units are converted to arbitrary units with equally scaled axes; that is, one unit along the x-axis is equal to one unit along the y-axis. \\ The SetWindowExt and SetViewportExt functions must be used to specify the desired units and the orientation of the axes. \\ GDI makes adjustments as necessary to ensure that the x and y units remain the same size.|
^SetLandscape|Set the Impresora orientation to Landscape|
|  |**Sintaxis:** \\ <oPrn>:SetLandscape()|
|  |**Parámetros:** \\ None \\ **Devuelve:** \\ Nothing|
^SetLoInchMode|Set the low inch mode.|
|  |**Sintaxis:** \\ <oPrn>:SetLoInchMode() -> <nPrevMapMode>|
|  |**Parámetros:** \\ None \\ **Devuelve:** \\ A numeric value indicating the previous map mode if this operation was successful. \\ **Comments:** \\ Each logical unit is converted to 0.01 inch. Positive x is to the right; positive y is up.|
^SetLoMetricMode|Set the low Metric mode.|
|  |**Sintaxis:** \\ <oPrn>:SetLoMetricMode() -> <nPrevMapMode>|
|  |**Parámetros:** \\ None \\ **Devuelve:** \\ A numeric value indicating the previous map mode if this operation was successful. \\ **Comments:** \\ Each logical unit is converted to 0.1 millimeter. Positive x is to the right; positive y is up.|
^SetPage|Specifies the size of the paper to print on.|
|  |**Sintaxis:** \\ <oPrn>:SetPage( <nPageType> ) -> nil|
|  |**Parámetros:** \\ <nPageType> Specifies the size of the paper to print on. \\ 1 Letter 8 1/2 x 11 in, \\ 2 Letter Small 8 1/2 x 11 in, \\ 3 Tabloid 11 x 17 in, \\4 Ledger 17 x 11 in, \\ 5 Legal 8 1/2 x 14 in, \\ 6 Statement 5 1/2 x 8 1/2 in, \\7 Executive 7 1/4 x 10 1/2 in, \\ 8 A3 297 x 420 mm, \\ 9 A4 210 x 297 mm, \\ 10 A4 Small 210 x 297 mm, \\ 11 A5 148 x 210 mm, \\ 12 B4 250 x 354, \\ 13 B5 182 x 257 mm, \\ 14 Folio 8 1/2 x 13 in, \\ 15 Quarto 215 x 275, \\ 16 10x14 in, \\ 17 11x17 in, \\ 18 Note 8 1/2 x 11 in, \\ 19 Envelope #9 3 7/8 x 8 7/8, \\ 20 Envelope #10 4 1/8 x 9 1/2, \\ 21 Envelope #11 4 1/2 x 10 3/8, \\ 22 Envelope #12 4/276 por 11, \\ 23 Envelope #14 5 x 11 1/2, \\ 24 C size sheet, \\ 25 D size sheet,\\ 26 E size sheet, \\ 27 Envelope DL 110 x 220mm, \\ 28 Envelope C5 162 x 229 mm, \\ 29 Envelope C3 324 x 458 mm, \\ 30 Envelope C4 229 x 324 mm, \\ 31 Envelope C6 114 x 162 mm, \\ 32 Envelope C65 114 x 229 mm, \\ 33 Envelope B4 250 x 353 mm, \\ 34 Envelope B5 176 x 250 mm, \\ 35 Envelope B6 176 x 125 mm, \\ 36 Envelope 110 x 230 mm, \\ 37 Envelope Monarch 3.875 x 7.5 in, \\ 38 6 3/4 Envelope 3 5/8 por 6 1/2 in, \\ 39 US Std Fanfold 14 7/8 x 11 in, \\ 40 German Std Fanfold 8 1/2 x 12 in, \\ 41 German Legal Fanfold 8 1/2 x 13 in, \\ #define DMPAPER_LAST DMPAPER_FANFOLD_LGL_GERMAN, \\ #define DMPAPER_USER 256 \\ **Devuelve:** \\ nil.|
^SetPixel|Draws a black pixel|
|  |**Sintaxis:** \\ <oPrn>:SetPixel( <nRow>, <nCol> )|
|  |**Parámetros:** \\ **<nRow>,<nCol>** The coordinates of the pixel.  \\ **Devuelve:** \\ The previous color of the pixel|
^SetPixelMode|Set the Pixel mode.|
|  |**Sintaxis:** \\ <oPrn>:SetPixelMode() -> <nPrevMapMode>|
|  |**Parámetros:** \\ None \\ **Devuelve:** \\ A numeric value indicating the previous map mode if this operation was successful \\ **Comments:** \\ Each logical unit is converted to one device pixel. Positive x is to the right; positive y is down.|
^SetPortrait|Set the Impresora orientation to Portrait|
|  |**Sintaxis:** \\ <oPrn>:SetPortrait()|
|  |**Parámetros:** \\ None \\ **Devuelve:** \\ Nothing|
^ SetPos|Set a new position on the page for next printing|
|  |**Sintaxis:** \\ <oPrn>:SetPos( <nRow>, <nCol> ) -> <nLPrevPos>|
|  |**Parámetros:** \\ **<nRow> <nCol>** The coordinates of the new position. By default they are expressed in pixels, unless another mode (SetMapMode())is being used. \\ **Devuelve:** \\ A numeric long value containing the previous device selected position: \\ <nPrevRow> = nLoWord( <nLPrevPos> ) \\ <nPrevCol> = nHiWord(<nLPrevPos>)|
^SetSize|Selects a different page dimensions|
|  |**Sintaxis:** \\ <oPrn>:SetSize( <nWidth>, <nHeight> ) -> nil|
|  |**Parámetros:** \\ <nWidth> <nHeight> The new dimensions for the Impresora page in tenths of millimeters. \\ **Devuelve:** \\ nothing|
^SetTwipsMode|Each logical unit is converted to 1/20 of a point|
|  |**Sintaxis:** \\ <oPrn>:SetTwipsMode() ->  <nPrevMapMode>|
|  |**Parámetros:** \\ None \\ **Devuelve:** \\ A numeric value indicating the previous map mode if this operation was successful \\ **Observaciones:** \\ Each logical unit is converted to 1/20 of a point. (Because a point is 1/72 inch, a twip is 1/1440 inch). Positive x is to the right; positive y is up.|
^SetFont|Sets and retrieves the default Impresora font object|
|  |**Sintaxis:** \\ <oPrn>:SetFont( <oNewFont> ) -> <oFont>|
|  |**Parámetros:** \\ **<oNewFont>** Is the new font object to set as the Impresora default one. To create it use: DEFINE FONT oFont NAME ... SIZE ... \\ **Devuelve:** \\ <oFont> The default font object associated to the Impresora.|
^Setup|Standard Setup DialogBox for printing|
|  |**Sintaxis:** \\ <oPrn>:Setup() -> nil|
|  |**Parámetros:** \\ None \\ **Devuelve:** \\ Nothing|
^SetViewPortExt|Sets the X and Y dimensions of the viewport|
|  |**Sintaxis:** \\ <oPrn>:SetViewPortExt( <nXExtent>, <nYExtent> ) --> <nPrevViewPortExt>|
|  |**Parámetros:** \\ **<nXExtent> <nYExtent>** Specifies the new X-extent and Y-extent, in device units of the viewport. \\ **Devuelve:** \\ The return value is the previous viewport extents, in device units, if the function is successful. The low-order word contains the previous x-extent; the high-order word contains the previous y-extent. Otherwise, the return value is zero: <nPrevXExtent> = nLoWord(<nPrevViewPortExt>) <nPrevYExtent> = nHiWord( <nPrevViewPortExt> )|
^SetWindowExt|Sets the X and Y extents of the Impresora device|
|  |**Sintaxis:** \\ <oPrn>:SetWindowExt( <nWidth>, <nHeight> ) -> <nPrevWindowExt>|
|  |**Parámetros:** \\ **<nWidth>, <nHeight> ** Specifies the new X-extent and Y-extent, in logical units, of the device context of the Impresora. \\ **Devuelve:** \\ The return value is the previous device extension, in logical units, if the function is successful. The low-order word contains the previous x-extent; the high-order word contains the previous y-extent. Otherwise,the return value is zero: <nPrevXExtent> = nLoWord(<nPrevWindowExt>) <nPrevYExtent> = nHiWord( <nPrevWindowExt> )|
^StartPage|Begins a new page|
|  |**Sintaxis:** \\ <oPrn>:StartPage() StartPage starts a new page. From that moment on you may perform any printing action on the Impresora object, like :Say(), :Box(), :Line(), etc... \\ You may print at any coordinate of the page. Once you have completed the page, an :EndPage() should be done.|
^SetBin|Changes default bin Impresora|
|  |**Sintaxis:** \\ <oPrn>:SetBin(nBin) \\ #define DMBIN_FIRST DMBIN_UPPER, \\ #define DMBIN_UPPER 1, \\ #define DMBIN_ONLYONE 1, \\ #define DMBIN_LOWER 2, \\ #define DMBIN_MIDDLE 3, \\ #define DMBIN_MANUAL 4, \\ #define DMBIN_ENVELOPE 5, \\ #define DMBIN_ENVMANUAL 6, \\ #define DMBIN_AUTO 7, \\ #define DMBIN_TRACTOR 8, \\ #define DMBIN_SMALLFMT 9, \\ #define DMBIN_LARGEFMT 10, \\ #define DMBIN_LARGECAPACITY 11, \\ #define DMBIN_CASSETTE 14, \\ #define DMBIN_LAST DMBIN_CASSETTE|
^SizeInch2Pix|Converts a inches sizes into pixels sizes|
|  |**Sintaxis:** \\ <oPrn>:SizeInch2Pix( <nHeight>, <nWidth> ) -> <aSize>|
|  |**Parámetros:** \\ **<nHeight>,<nWidth>** The inches sizes as numeric values.  \\ **Devuelve:** \\ <aSize> An array with the new sizes in pixel coordinates: <nowiki>{||nWidth,|nHeight }</nowiki>|
^GetModel|Retrieves the Impresoras model name|
^CharSay|Simulates MSDOS printing|
|  |**Sintaxis:** \\ <oPrn>:CharSay(nRow, nCol, cText)|
^CharWidth|Retrieves MSDOS printing char width|
^CharHeight|Retrieves MSDOS printing char height|

====== Ejemplo ======

====== See Also ======

====== Source code ======
FWH\SOURCE\CLASSES\TPRINTER.PRG