====== Clase TVbControl ======

Clase TVbControl\\ Hereda de TControl                                                 

====== DATOS ======

^  Nombre  ^  Descripción  ^
^aEventNames|Un arreglo con los nombres de todos los eventos|
^lRegistered|ClassData para almacenar el estado de registro WinApi de la clase|
^hCtl|El manejador del control VBX control (Valor interno del API)|
^aEvents|Un arreglo con todos los eventos definidos y sus acciones relacionadas.|

====== METODOS ======

^  Nombre  ^  Descripción  ^
^New|Crea un nuevo control VBX de codigo fuente |
| |**Sintaxis:** \\ TVbControl():New(nRow, nCol, nWidth, nHeight, oWnd, cVbxFile, cVbxClass, aEvents ) |
^ReDefine|Redefine un VBX a ser usado desde recurso |
| |**Sintaxis:** \\ TVbControl():ReDefine(nId, oWnd, nClrFore, nClrBack, aEvents ) |
^Initiate|Inicializacion generica de un VBX|
^GetPropName|Recupera el nombre de la propiedad d un VBX por este orden|
^aGetProps|Devuelve un arreglo con todos los nombres de las propiedades|
^Default|Valores por defecto para la inicializacion del VBX|
^SetProp|cambia una propiedad de VBX por este orden|
^GetName|Recupera el nombre de la clase del control VBX (valor API) |
^nGetProps|Recupera el numero de propiedades del VBX |
^nGetEvents|Recupera el numero de eventos del VBX |
^GetEvent|Recupera el nombre de un evento de VBX por su nombre |
^GetEnums|Recupera un arreglo con un VBX enumerando todos los posibles valores |
^Get|Recupera el valor de una propiedad por su nombre|
^Set|Cambia el valor de una propiedad VBX por su nombre |
^GetProp|Recupera el valor de una propiedad por su orden|
^GetPropType|Recupera el tipo de una propiedad VBX|
^HandleEvent|Manejador de eventos específico VBX (heredado de TControl) |
^VbxEvent|Función de soporte para el manejador de eventos interno del VBX |
^VbxInherit|Proceso interno heredado automáticamente para sistemas 5W VBX |
^cToChar|Genera una plantilla de datos para construir un dialogo|

====== Ejemplo ======
<code clipper>
// Using Borland's BiVbx10.dll VBX Controls support

#include "FiveWin.ch"
#include "Testbvbx.ch"

static oDlg, oVbx

//----------------------------------------------------------------------------//

function Main()

   local oName, oProperties, oEvents
   local oNProps, oNEvents

   SET _3DLOOK ON

   DEFINE DIALOG oDlg RESOURCE "Test" VBX

   REDEFINE VBX oVbx ID ID_VBX OF oDlg  ;
                COLOR "N/W"             ;
                ON ON  WQOut( { PCOUNT(), bP1 } ) ;
                ON OFF WQOut( { PCOUNT(), bP1 } )

   REDEFINE LISTBOX oProperties ;
      FIELDS "" ;
      HEADERS "Properties" ;
      ID ID_PROPERTIES OF oDlg

   REDEFINE LISTBOX oEvents ;
      FIELDS "" ;
      HEADERS "Events" ;
      ID ID_EVENTS OF oDlg

   REDEFINE SAY oName    PROMPT oVbx:GetName()    ID ID_NAME        OF oDlg
   REDEFINE SAY oNProps  PROMPT oVbx:nGetProps()  ID ID_NPROPERTIES OF oDlg
   REDEFINE SAY oNEvents PROMPT oVbx:nGetEvents() ID ID_NEVENTS     OF oDlg

   // REDEFINE BUTTON ID ID_LOAD OF oDlg ACTION LoadVbx()
   REDEFINE BUTTON ID ID_LOAD OF oDlg ;
                ACTION WQOut( oVbx:GetEnums( "DragMode" ) )

   ACTIVATE DIALOG oDlg CENTERED ;
      ON INIT ( oName:Refresh(), oNProps:Refresh(), oNEvents:Refresh(),;
                PropertiesInit( oProperties, oVbx ),;
                oEvents:SetArray( oVbx:aEventNames ) )

return nil

//---------------------------------------------------------------------------//

static function ParamInfo( pCount, cEvent, aParams )

    local aTest := array( 2 + pCount * 2 )
    local i, n := 1

    aTest[ n++ ] = pCount
    aTest[ n++ ] = cEvent

    for i = 1 to pCount
        aTest[ n++ ] = valtype( aParams[ i ] )
        aTest[ n++ ] = aParams[ i ]
    next

    WQOut( aTest )

return nil

//----------------------------------------------------------------------------//

function PropertiesInit( oProps, oVbx )

   oProps:nAt       = 1
   oProps:bLine     = { || { oVbx:GetPropName( oProps:nAt ),;
                             cValToChar( oVbx:GetProp( oProps:nAt ) ) } }
   oProps:bGoTop    = { || oProps:nAt := 1 }
   oProps:bGoBottom = { || oProps:nAt := oVbx:nGetProps() }
   oProps:bLogicLen = { || oVbx:nGetProps() }
   oProps:bSkip     = { | nSkip, nOld | nOld := oProps:nAt,;
                        oProps:nAt += nSkip,;
                        oProps:nAt := Min( Max( oProps:nAt, 1 ),;
                        Eval( oProps:bLogicLen ) ), oProps:nAt - nOld }

return nil

//----------------------------------------------------------------------------//

function LoadVbx( oDlg )

   local cVbxFile := cGetFile( "*.vbx", "Select a VBX" )

   if ! Empty( cVbxFile )
      oVbx:End()
      SysRefresh()
   endif

return nil

//----------------------------------------------------------------------------//
</code>
====== Vea tambien ======
[[fivewin_comando_vbxs|Comando Vbx]], [[fivewin_clase_TVbxArray|Clase TVbxArray]]

====== Codigo Fuente ======

FWH\SOURCE\CLASSES\TVBCONTROL.PRG

