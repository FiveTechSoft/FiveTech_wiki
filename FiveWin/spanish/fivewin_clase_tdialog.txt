====== Class TDialog ======

Cajas de Diálogo

Hereda de TWindow

====== DATA ======
|cResName|Resource Name of the Diálogo|
|cResData|Resource Data of the Diálogo|
|hResources|Handle of the Resource where to find the Diálogo|
|lCentered|Logical value if centering the Diálogo when painting|
|lModal|Logical value if the Caja de Diálogo is modal|
|lHelpIcon|Windows95 help icon pressed|
|lResize16|Resizes 32 bit resources to look like 16 bit ones|
|bStart|Action to be performed automatically just once at start|
|lModify|Logical value to allow using the Controls -not implemented-|

























====== METHODS ======
^New|Generic constructor method|
|  |**Sintaxis:** \\ TDialog():New( <nTop>, <nLeft>, <nBottom>, <nRight>,; \\ <cCaption,<cResName>, <hResources>, <nStyle>,; <ncClrText>, <nClrBack>,<oBrush>,<oWnd>,; \\ <lPixels>, <oIco>, <oFont> ) -><oDialog>|
| |**Parámetros:** \\ **<nTop>, <nLeft>** These two determine the top left corner of the Caja de Diálogo. \\ **<nBottom>,<nRight>** The right bottom corner of the Caja de Diálogo. \\ **<cCaption>** The title of the Caja de Diálogo. \\ **<cResName>** The name of the Caja de Diálogo structure stored in a resource (either a .DLL or linked to the executable by RC.EXE). \\ **<hResources>** The handle, which points to the resources that are linked to this application. \\ If this parameter is not passed when <cResName> is passed it is assumed that the Caja de Diálogo \\ structure is stored in either the .EXE file or in the default .DLL. \\ **<nStyle>** Determines the characteristics of the Caja de Diálogo. These characteristics are defined by the same values that are used \\ for the <nStyle> parameter of the New() method for the TWindow() class (defined in WINAPI.CH) or one of the following constants which can only be used for a Caja de Diálogo: \\ **<ncClrText>** The foreground color (the color that is used to draw on the Caja de Diálogo). This can either be a MS-Windows COLOR number or a CA-Clipper color string (ie "R/G") \\ in which case the nClrBack parameter will be ignored. \\ **<nClrBack>** The background color of the Caja de Diálogo. This has to be a MS-Windows COLOR number.\\ **<oBrush>** The brush used to paint the client area of the Caja de Diálogo. It is stored in the instance variable ::oBrush. If none is passed, it will be created by the method SetColor(). \\ **<oWnd>** The TWindow object of which this Caja de Diálogo is the child window. If this parameter is not passed it means that this Diálogo will be linked to the main window of the application. \\ **<lPixels>** Logical which determines whether the coordinates passed, will either be in pixels (a la Windows) or on a character base (a la CA-Clipper) \\ **<oIcon>** The icon that will be used whenever this Caja de Diálogo is minimized. If none is passed the icon is USER.EXE (which means you get a small MS-Windows logo as the icon). \\ **<oFont>** The font that will be used when something is written onto the Caja de Diálogo or when a control is placed on the Caja de Diálogo that has no font defined for it \\ **Devuelve:** \\ **<oDialog>** The TDialog object that was created by the New()method. \\ **Observaciones:** \\ This constructor has a lot of Parámetros, so it quite easy to make a mistake. It is easier, both for you and for someone who is reading \\ your code, to use the DEFINE Diálogo statement.|
^Define|Alternative constructor|
|  |**Sintaxis:** TDialog():Define( <nTop>, <nLeft>, <nBottom>,<nRight>,; \\ <cCaption>, <nStyle>, <lVbx>, <nClrText>,;<nClrBack>, <oBrush>) -> <oDialog>|
|  |**Parámetros:** The Parámetros mentioned for this method have exactly the same purpose and definition as the ones that are defined for the New() \\ method. \\ **Devuelve:** \\ **<oDialog>** The TDialog object that was created by the New() method \\ **Observaciones:** The Define() method is another constructor for TDialog() objects. It will also return a TDialog() object however without all the settings that the New() method will handle for you.|
^Activate|Starts interaction with the Caja de Diálogo|
|  |**Sintaxis:** \\ TDialog():Activate( <bClicked>, <bMoved>, <bPainted>, <lCentered>, <bValid>, <lModal>, <bInit>, <bRClicked>, <bWhen> ) -> NIL|
|  |**Parámetros:** \\ **<bClicked>** This bloque de código will be executed whenever there is a click of the left mouse button on the Caja de Diálogo. The bloque de código will be called with three Parámetros: \\ **<nRow>** The pixel row where the mouse cursor was positioned when the mouse click occurred. \\ **<nCol>** The pixel column where the mouse cursor was positioned when the mouse click occurred. \\ **<nKeyFlags>** Indicates which virtual keys are down and if the right or the middle mouse button was pressed also. It can be a combination of the following \\ values which have the following constant names in the MS-Windows API description: \\ MK_RBUTTON 2 The right mouse button was pressed also. \\ MK_SHIFT 4 The <Shift> key was pressed. \\ MK_CONTROL 8 The <Ctrl> key was pressed. \\ MK_MBUTTON 16 The middle mouse button was pressed. \\ **<bMoved>** Currently not used. \\ **<bPainted>** This code block will be called whenever the Caja de Diálogo is repainted (ie the Caja de Diálogo receives a WM_PAINT message from MS-Windows). \\ When <bPainted> is called it receives one parameter and that is a reference to the TDialog() object \\ **<lCentered>** Determine whether or not the Caja de Diálogo should be centered on the screen when it is displayed. If <lCentered> is .T. the Diálogo will be centered \\ regardless of the coordinates that are stored in ::nTop, ::nLeft. The width and height of the Caja de Diálogo however are NOT changed. If <lCentered> is .F. \\ however the Caja de Diálogo will be placed on the screen as the coordinates ::nTop, ::nLeft dictate this. \\ **<bValid>** If this bloque de código is passed it will be called whenever the Caja de Diálogo should be closed. <bValid> has to return a logical value to indicate whether or not the Caja de Diálogo is allowed to close. \\ **<lModal>** This parameter determines whether or not this Caja de Diálogo will be a MODAL or a NON MODAL Caja de Diálogo. The default value is .T. which means that the current Caja de Diálogo will be a modal Caja de Diálogo,ie the program will continue only after the Caja de Diálogo is closed. \\ **<bInit>** This bloque de código will be executed after the Caja de Diálogo is displayed for the first time. It receives one parameter which is a reference to the TDialog() object itself. \\ **<bRClicked>** This bloque de código will be executed whenever there is a click of the right mouse button on the Caja de Diálogo. The bloque de código will be called with three Parámetros: <bWhen> This bloque de código will be executed just before the Caja de Diálogo is shown. The bloque de código will be evaluated and called with three Parámetros: However if the result is .F.then the Caja de Diálogo will NOT be shown. \\ **Devuelve:** \\ NIL \\ **Observaciones:** \\ The Activate() method will actually show the Caja de Diálogo on the screen. Before a call to this method is made the Caja de Diálogo is not yet visible. Through the Parámetros Activate() receives, several aspects of the Caja de Diálogo are controlled, like whether or not the Caja de Diálogo is MODAL or NON-MODAL (<lModal>).|
^AdjTop|Adjust the Diálogo to the top of its container window|
^ChangeFocus|Changes the focus|
^Close|Close Caja de Diálogo|
|  |**Sintaxis:** \\ TDialog():Close( <nResult> ) -> NIL|
|  |**Parámetros:** \\ **<nResult>** The value the instance variable ::nResult receives when the Caja de Diálogo is closed. \\ **Devuelve:** \\ NIL \\ **Observaciones:** \\ The Close() method is almost identical to the End() method, with regards to its purpose. This purpose is to close the Caja de Diálogo and remove it from the screen. There is however one difference, unlike the End() method the Close() method has no default value for nResult. This means that if <nResult> is not passed that ::nResult will become NIL.|
^Command|Handle commands sent to Caja de Diálogo|
|  |**Sintaxis:** \\ TDialog():Command( <nWParam>, <nLParam> ) -> Nil|
|  |**Parámetros:** \\ **<nWParam>** This parameter actually holds two pieces of information which have the following meaning: <nCode> = nHiWord(nWParam). This value specifies the notification code if the message is from a control. If the message is from an accelerator, this parameter is 1. If the message is from a menu, this parameter is 0. nID = nLoWord(wParam); This part represents the identifier of either an item, a control or an accelerator.\\ **<nLParam>** This value contains the handle of the control sending the message if the message is from a control. Otherwise, this parameter is NULL. \\ **Devuelve:** \\ Nil \\ **Observaciones:** \\ The Command() method is automatically called (by the eventhandler) when processing a WM_COMMAND WinApi message. If a message is processed it should return 0.|
^CtlColor|Ctlcolor event handler|
^cToChar|Translate handle to structure item|
|  |**Sintaxis:** TDialog():cToChar( <hActiveWnd> ) -><cDiálogoStructure>|
|  |**Parámetros:** \\ <hActiveWnd> The handle that should be included in the structure built by cToChar(). \\ **Devuelve:** \\ <cDiálogoStructure> The Diálogo structure created by ::cToChar(). This structure is stored in a character string because CA-Clipper has no provisions for making and using structures. \\ **Observaciones:** \\ The cToChar() method will translate all the necessary information needed to create a Caja de Diálogo into one big string. This string has exactly the structure needed by the MS-Windows API functions \\ that create a Caja de Diálogo. The information is stored in to a character string because CA-Clipper has no knowledge of structure's since this is not part of the CA-Clipper language.|
^DefControl|Connect control to Caja de Diálogo|
|  |**Sintaxis:** \\ TDialog():DefControl( <oControl> ) -> Nil|
|  |**Parámetros:** \\ **<oControl>** The control that has to be connected to the current Caja de Diálogo. \\ **Devuelve:** \\ Nil \\ **Observaciones:** This method is used when a control is added to a Caja de Diálogo that gets it's structural information from a resource (either linked to the .EXE by RC.EXE or stored in a .DLL file). \\ Before the control is added a check is made to see whether or not the ::nID instance variable of <oControl> is unique for this Caja de Diálogo. \\ If the value of <oControl>:nID is already in use a warning will be shown and the control will NOT be added to the ::aControls instance variable.|
^Destroy|Destroy Caja de Diálogo|
|  | **Sintaxis:** \\ TDialog():Destroy() -> <lxResult> |
|  | **Devuelve:** \\ <lxResult> The return value depends upon the fact if the Diálogo was MODAL. If the Caja de Diálogo was modal Destroy() will return .T., otherwise Destroy() will return NIL. \\ **Observaciones:** \\ The Destroy() method handles the actual removal of the Caja de Diálogo. It should NOT be called directly. If you want to end a Caja de Diálogo you should either call the End() \\ method or the Close() method. !seealso wincls.eho:"Destroy" TDialog.eho:"End" TDialog.eho:"Close"|
^Display|Displays Caja de Diálogo|
|  |**Sintaxis:** \\ TDialog():Display() -> .F.|
|  |**Observaciones:** \\ The Display() method paints the Diálogo onto the screen. After the Caja de Diálogo is painted, Display() will see if the ::bSTartinstance variable <> NIL. If this is the case Display() will evaluate ::bStart.|
^End|End Caja de Diálogo|
|  |**Sintaxis:** \\ TDialog():End( <nResult> ) -> .T.|
|  |**Parámetros:** \\ **<nResult>** \\ The numerical value that will be passed on to the::nResult instance variable, when the Caja de Diálogo is closed. \\ **Observaciones:** \\ With the End() method the programmer can lose the Caja de Diálogo and remove it from the screen. However if the ::bValid instance variable contains a code block, then the code block will be evaluated first. If the result of the evaluation is .T. the Caja de Diálogo will be closed. If the evaluation of ::bValid Devuelve .F., then the Caja de Diálogo will NOT be ended.|
^EraseBkGnd|Erase background of Caja de Diálogo|
|  |**Sintaxis:** \\ TDialog():EraseBkGnd( <hDC> ) -> .T.|
|  |**Parámetros:** \\ **<hDC>** \\ The DEVICE CONTEXT handle of this Caja de Diálogo. \\ **Observaciones:** \\ This method can be used to repaint the background of the Caja de Diálogo. It is also used by the eventhandler. However the background will be repainted only if the ::oBrush instance variable contains a brush object.|
^GetHotPos|Return the handle of the control with the specifiedhotkey|
^GetItem|Get the handle of a certain control|
|  |**Sintaxis:** \\ TDialog():GetItem( <nId> ) -> <nHWnd>|
|  |**Parámetros:** \\ **<nId>** The ID of the control for which the 'window handle' should be returned. \\ **Devuelve:** \\ <nHWnd> The handle of the control that is identified by <nId>. If a control can be found on the current Caja de Diálogo, <nHWnd> will be the handle to that control. \\ If no control can be found with id <nId> the return value will be 0. \\ **Observaciones:** \\ The purpose of this method is to retrieve a WINDOW HANDLE of a specific control, so you can use an API function to do a certain task. However use this with care, because using the wrong API function with a handle can cause serious problems for your application.|
^GotFocus|Called when Diálogo receives focus|
|  |**Sintaxis:** \\ TDialog():GotFocus() -> <xValue>|
|  |**Devuelve:** \\ <xValue> If the ::bGotFocus contains a bloque de código the return value will be the value that was the result of the evaluation of ::bGotFocus. Otherwise <xValue> will be NIL. \\ **Observaciones:** \\ This method is called just after the Caja de Diálogo has received focus. This allows you to have some work done whenever the Diálogo receives focus. Whenever a Caja de Diálogo receives focus the eventhandler will call the GotFocus() method, \\ which in turn evaluates the ::bGotFocs instance variable. !seealso TDialog.eho:"Lostfocus"|
^HandleEvent|Event handler for Cajas de Diálogo|
|  |**Sintaxis:** \\ TDialog():HandleEvent(<nMsg>, <nWParam>, <nLParam>) |
|  |**Observaciones:** \\ This method handles all the events for a particular TDialog object. It directly calls a C-function ( WndHandleEvent() ). This is done to increase speed. For complete documentation on each and every value of <nMsg> and its associated values of <nWMparam> and <nLParam> \\ please check out a book (or help file) on MS-Windows messages and how they are handled.|
^Help|Help event handler|
^Initiate|Handle initialization of Caja de Diálogo|
|  |**Sintaxis:** \\ TDialog():Initiate() -> .T.|
|  |**Observaciones:** \\ This method handles the initialization of the Caja de Diálogo. If the Caja de Diálogo contains one or more VBX controls the necessary initialization is performed. Also for all controls that are connected to the Caja de Diálogo their individual \\ Initiate() method is called. Just before the Initiate() method of the Diálogo ends it evaluates the ::bInit instance variable.|
^KeyChar|Keychar event handler|
^LostFocus|Handles losing focus by Caja de Diálogo|
|  |**Sintaxis:** \\ TDialog():LostFocus() -> <xValue>|
|  |**Devuelve:** \\ <xValue> If the ::bLostFocus contains a bloque de código the return value will be the value that was the result of the evaluation of ::bLostFocus. Otherwise <xValue> will be NIL. \\ **Observaciones:** \\ The LostFocus() method is called by the eventhandler of the Caja de Diálogo whenever the Caja de Diálogo loses focus. When LostFocus() is called it in turn evaluates the ::bLostFocus bloque de código.|
^MouseMove|Mouse move event handler|
^Paint|Paints the Diálogo|
^QueryEndSession|Check if application can be closed|
|  |**Sintaxis:** \\ TDialog():QueryEndSession() -> <lNoEnd>|
|  |**Devuelve:** \\ <lNoEnd> is a logical which represents whether or not the Windows session may be ended. If <lNoEdn> is .T. the Windows session my NOT be ended. If <lNoEnd> is .T. the Windows session may be ended. \\ **Observaciones:** \\ The QueryEndSession() method is called by the eventhandler whenever Windows sends a WM_QUEYENDSESSION to a Caja de Diálogo. This message is sent to a Caja de Diálogo if the user wants to end the MS-Windows session. \\ The QueryEndSession() will return .T. if the windows session is NOT allowed to end. Otherwise QueryEndSession() Devuelve .F..|
^SetControl|Sets the control to be resized to fill the client area of the Diálogo|
^SetFont|Sets a font for the Diálogo|
^SysCommand|System command event handler|
^VbxFireEvent|Handling of VBX events by Caja de Diálogo|
|  |**Sintaxis:** \\ TDialog():VbxFireEvent( <pEventInfo> ) |
|  |**Parámetros:** \\ **<pEventInfo>**  The <pEventInfo> is a 'pointer' to an event structure used for VBX controls in Borland's BIVBX10.DLL. \\ **Observaciones:** This method is called by the eventhandler whenever a VBX control generates a WM_VBXFIREEVENT message. \\ The method receives the required information via a pointer to a VBX structure ( <pEventInfo> ).|
^Help95|Activate the context help button|

====== Ejemplo ======

====== See Also ======


====== Código fuente ======
FWH\SOURCE\CLASSES\TDialog.PRG