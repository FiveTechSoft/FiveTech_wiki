====== SetClpData() ======
Changes the contents of the clipboard

====== Syntax ======
SetClpData( <nFormat>, <uData> )  --> <lSuccess> 

====== Parameters ======
^Paramater^Description^
|<nFormat>| Specifies the format of the data. It can be any one of the system-defined formats or a format registered by the RegisterClipboardFormat function.\\ **CF_BITMAP** The data is a bitmap.\\ **CF_DIB** The data is a memory object containing a BITMAPINFO structure followed by the bitmap data.\\ **CF_DIF**  The data is in Data Interchange Format (DIF).\\ **CF_DSPBITMAP**  The data is a bitmap representation of a private format. This data is displayed in bitmap format in lieu of the privately formatted data.\\ **CF_DSPMETAFILEPICT**  The data is a metafile representation of a private data format. This data is displayed in metafile-picture format in lieu of the privately formatted data.\\ **CF_DSPTEXT**  The data is a textual representation of a private data format. This data is displayed in text format in lieu of the privately formatted data.\\ **CF_METAFILEPICT** The data is a metafile (see the description of the METAFILEPICT structure)\\ **CF_OEMTEXT**  The data is an array of text characters in the OEM character set. Each line ends with a carriage return-linefeed (CR-LF) combination. A null character signals the end of the data.\\ **CF_OWNERDISPLAY** The data is in a private format that the clipboard owner must display.\\ **CF_PALETTE** The data is a color palette.\\ **CF_PENDATA** The data is for the pen extensions to the Windows operating system.\\ **CF_RIFF**  The data is in Resource Interchange File Format (RIFF).\\ **CF_SYLK** The data is in Symbolic Link (SYLK) format.\\ **CF_TEXT** The data is an array of text characters. Each line ends with a carriage return linefeed (CR-LF) combination. A null character signals the end of the data.\\ **CF_TIFF**  The data is in Tag Image File Format (TIFF).\\ **CF_WAVE**  The data describes a sound wave. This is a subset of the CF_RIFF data format; it can be used only for RIFF WAVE files.|
| <uData> |The handle of the data to place at the Clipboard. Right now FiveWin only supports text, due not to a FiveWin limitation since that all formats have not yet been implemented. |

Private data formats in the range **CF_PRIVATEFIRST** through **CF_PRIVATELAST** are not automatically freed when the data is removed from the clipboard.
Data handles associated with these formats should be freed upon receiving a **WM_DESTROYCLIPBOARD** message. 

Private data formats in the range **CF_GDIOBJFIRST** through **CF_GDIOBJLAST** will be automatically removed by a call to the DeleteObject function when the data is removed from the clipboard. If Windows Clipboard is running, it will not update its window to show the data placed in the clipboard by the SetClipboardData until after the CloseClipboard function is called.

====== Example ======
\Fwh\Samples\TestClip.prg 
<code clipper>
// This sample shows how to use Windows ClipBoard from FiveWin.
// To FiveWin, the ClipBoard is also an object!

#include "FiveWin.ch"

static oWnd, oClp

//----------------------------------------------------------------------------//

Function Main()

   DEFINE WINDOW oWnd FROM 1, 1 TO 20, 70 ;
      TITLE "Using Windows ClipBoard" ;
      MENU BuildMenu()

   DEFINE CLIPBOARD oClp OF oWnd

   SET MESSAGE OF oWnd TO FWVERSION CENTERED

   ACTIVATE WINDOW oWnd

return nil

//----------------------------------------------------------------------------//

Function BuildMenu()

   local oMenu

   MENU oMenu
      MENUITEM "&Using the ClipBoard"
      MENU
         MENUITEM "Place some text..." ;
            ACTION PlaceSomeText()

         MENUITEM "&Retrieve the text..." ;
            ACTION GetSomeText()

         SEPARATOR

         MENUITEM "&Clear the ClipBoard"  ACTION oClp:Clear()
         SEPARATOR
         MENUITEM "Bye, bye..."               ACTION oWnd:End()
      ENDMENU

      MENUITEM "Call ClipBoard management EXE" ACTION WinExec( "ClipBrd" )
   ENDMENU

Return oMenu

//----------------------------------------------------------------------------//

Function PlaceSomeText()

   local cText := Space( 30 )

   if MsgGet( "Ok...", "Write something!", @cText )
      oClp:SetText( cText )
   endif
   
   MsgInfo( "Number of bytes in clipboard: " + Str( Len( oClp:GetText() ) ) )

return nil

//----------------------------------------------------------------------------//

Function GetSomeText()

   local cText := oClp:GetText()

   if Empty( cText )
      nMsgBox( OemToAnsi( "There is nothing there!" ), "I am sorry" )
   else
      nMsgBox( cText, "Tadddaa !!!" )
   endif

Return nil

//----------------------------------------------------------------------------//
</code>

====== Source Code ======
SOURCE\\WINAPI\\ClpBrd.c 

====== See also ======
[[fivewin_function_OpenClipboard|OpenClipboard()]]
[[fivewin_function_SetClipboard|SetClipboard()]]
[[fivewin_function_EmptyClipboard|EmptyClipboard()]]
[[fivewin_function_GetClpData|GetClpData()]]