**__Fivewin Programming Guide__**
====== Introduction ======
The FiveWin Programming Guide offers a guided introduction to Windows applications development techniques using CA-Clipper & FiveWin. It will explain to you the basic concepts you must understand in order to properly build your Windows applications.

Use this section to look for recommendations and programming techniques, not for details. Here you will begin to understand the different components to use when building a Windows application and how they should be combined.

The FiveWin Programming Guide teaches you how to build applications using FiveWin, step by step.

The FiveWin Reference Guide explains in more depth all the necessary details you will need when building those applications.

====== Organizing Your Working Desktop ======

===== Installing The Software =====
FiveWin automatically installs in your computer generating the following directories trees:

FIXME - insert image here later

It is best that every time you install FiveWin, you select a different directory, and that you try the new version for a while before destroying your previous versions. Normally there are no compatibility problems with previous versions, but sometimes there may be some hanges.


·  Very important: As soon as you install the software, read the file  WHATSNEW.TXT in order to know what bug corrections, enhancements and modifications have been made.

· The latest process here is to modify the SAMPLES\Build.bat to SET appropriate your PATHS. Edit SAMPLES\Build.bat and modify PATHS.

· If everything is installed properly, you may go to the SAMPLES   directory, and try to build any sample:

                SAMPLES\Build Tutor01

This generates a stand alone EXE file, Tutor01.EXE. This may be run from the File Run command in Windows 3.1 or from the command line prompt in Windows 95!

===== Required Tools =====
Hardware requirements :

· FiveWin works from 386 computers and up. We do not support 286 computers.


· FiveWin may work in computers with 2 megs of RAM, though a minimum of 4 megs is highly recommended.

· FiveWin works in computers with DBLSPACE double spaced hard disks.

· FiveWin has been successfully tested with:

        - Windows 3.1
        - Windows 3.11 for WorkGroups
        - Windows 95
        - Windows NT


· FiveWin has been successfully tested in Windows for WorkGroups NetWork, Windows 95 NetWork, Windows NT NetWork and Novell Network.

Software requirements:

· CA-Clipper 5.01, CA-Clipper 5.2 or CA-Clipper 5.3.

· A Windows linker is required:


We highly recommend Blinker 3.0 and above versions. Blinker 3.XX is the Linker we normally use with our MsDos, Windows and IBM/OS2 Five versions.

· Microsoft LINK.EXE 5.10 version and above work fine with FiveWin:


· IBM/OS2 versions 2.1 and above supplies a version of Microsoft LINK that works fine with FiveWin.

· If you use LINK version 5.1 (the one provided with IBM/OS2) you need to use the SOURCE\TOOLS\ExeType.exe utility we provide to change the internal EXE version       generated by the LINKer:

ExeType.exe MyApp.exe 3.1   // Call this after generating the EXE

You may download the latest Microsoft link LINK.EXE directly from InterNet: ftp.microsoft.com/softlib/mslfiles/lnkXXX.exe

We do not support Borland's TLINK.EXE.

Symantec C++ 7.0 OptLink is compatible with FiveWin. C++ 6.0 version it is not compatible.


· A Windows Resource Editor is HIGHLY recommended. We normally use Borland's Resource WorkShop. We have also successfully tested Microsoft AppStudio resource editor. These tools come with Borland's C/C++ compiler or Microsoft Visual C++ compiler.

See the following:


· It is highly recommended that you acquire Borland's Turbo C++ for Windows or Borland's C++ 3.1 or Borland's C++ 4.0 or above.

We normally use Borland C++ 3.1. And all the C code included in FiveWin has been developed using Borland C/C++ compiler.

Also, Microsoft Visual C++ is a highly recommended tool to acquire. Also we have tested with Symantec C++.

These products include excellent Windows Resources editors, that you need to do Visual programming.

These products offer a lot of very useful documentation, tools and of course, the C/C++ compiler, that you may use to enhance FiveWin developing new API C and DLLs C functions.

We do recommend you to acquire one of these compilers. They will offer you many, manbenefits.



===== Dos Coding and Windows Testing =====
Clipper programmers traditionally select certain tools to build their own workbench environments. These are the tools that we strongly recommend to be used in Windows programming:


|Source code editor	|MultiEdit for Windows (+ Evolve for Windows) |
|(c) American Cibernetics ||
|File Manager |Windows Commander |
|(c) Christian Ghisler ||
|In CompuServe GO WINSHARE to get an evaluation edition ||
|Resource Editor |Borland's Resource WorkShop |
|Linker	|Blinker 3.3 and above (c) Blink Inc. |
|DataBases manager |Dbu for Windows  (c)OZ Soft www.ozs.com |

Clipper.EXE, Blinker.EXE and MsLink.EXE, are DOS EXEs, and they must be executed from within a Dos task.

Normally we keep one or two Windows MsDos tasks. Pressing Alt-TAB you may quickly switch from MsDos into Windows and vice versa. If you configure your Windows installation properly, you can direct all the  Windows normal activity swapping to a RamDisk, so the swapping to MsDos  and vice may be instant and without any hard disk activity.

We recommend you to create a Windows program manager new group, where  you place the icon of your FiveWin development application, plus an  icon for accessing MsDos, and another for the Windows resource editor  you use.

A great new benefit of Windows 95 is that you can automatically invoke  your Windows EXE from inside a MsDos task. So you may modify the  SAMPLES\BUILD.BAT we provide to automatically start your application  after linking it. So, no Alt-TAB pressing may be required to switch to  Windows.

We have compared our development cycle (editing-compiling-linking- testing) speed with other Windows development tools and platforms, and  we are proud to say, that by far, CA-Clipper and FiveWin are the  fastest Windows development tools for a professional programmer.

====== The components of Windows applications ======
 

===== The business-application point of view =====
Though Windows offers a lot of new and powerful capabilities, we insist in the idea that business-application components are still the same. We keep this idea very much in mind in order to be highly productive as xBase programmers.

In other words, we mean that you may try to cover the main parts of your application as you normally do, and later you will enhance your application with all the new fancy and powerful Windows new features.

**What are the basic parts of a business application ?**

Of course, the heart of a business applications is the database design and implementation, and here CA-Clipper is, with no doubt,  the king. In FiveWin you may keep all your existing database strategies and programming systems you normally use (though we will show how to get much more database development power then what you have, through FiveWin database objects and Windows Non-Modal designs).

Lets focus now on the user interface, and in all of the different parts of a Windows application. The more Windows applications you  start developing, you will discover you always go through the same steps:

1.	The main Window: In Windows, an application is always associated with a Window. We will see all the different kind of Windows you may build and how to build them.

2.	The PullDown Menu: From the main Window the user may select through a PullDown menu all the different options of your application.

3.	The Main Window ButtonBar and MessageBar are two components that you will find in many Windows applications. FiveWin provides all the necessary ingredients for building great looking and performing ButtonBars and Messagebar. The ButtonBar usually   executes actions that you also provide through the PullDown menu.

4.	From the main Window you will open DialogBoxes to interact with the user. Coming from Dos, now you are used to work with 'Modal' execution which means: Do just one thing at a time. But in Windows you may also take advantage of the Non-Modal execution. This means you may have several DialogBoxes at the same time.You will learn how easily this can be done in FiveWin.

5.	In some of these DialogBoxes you will use Browses. Normally a business application uses Browses extensively. You will learn to use FiveWin's powerful browses, which let you design any kind of browse you may need.

6.	To have a complete business application you need printing. All kind of reports, listings and printouts. FiveWin offers you a powerful built-in report engine to design any kind of business report in just few minutes.

===== The main window =====
Normally, to build your main window application you do as follows:

<code visualfoxpro>
#include "FiveWin.ch"

static oWnd

function Main()

DEFINE WINDOW oWnd TITLE "My application"

ACTIVATE WINDOW oWnd MAXIMIZED
return nil
</code>

In this sample you are selecting the most typical window, with default coordinates and style, and you start it at full open screen mode -MAXIMIZED-. If you want to place it at some position you may specify:

<code visualfoxpro>
... FROM nTop, nLeft TO nBottom, nRight ...
FROM 2, 2 TO 20, 60
</code>  


We simulate in these coordinates, text mode coordinates.

ACTIVATE WINDOW will invoke automatically the main application event loop if it is not working yet. Internally, the application only need one event loop for all the windows.

There are three main different ways to build your application window:


  * Defining a standard window (like the sample above).

  * Defining a MDI window: A multi document interface, this means a main window that will allow several child windows running inside it. For instance, Windows Program Manager is a MDI window.

  * Defining a DialogBox as the main application window: There are  some situations where you don't need to implement a main window, with pulldown menu, buttonbar, etc... and you just need some operations to be done, and just a DialogBox should be the perfect way.

FiveWin lets you start the application with all these above styles.

In the sample above the style of the window as default is OVERLAPPED- WINDOW which means all the typical features you find in a window:  caption, system menu, resizable border, min and max buttons.

If you want to specify other styles, FiveWin offers you some clauses  to select them:

  * NOSYSMENU
  * NOCAPTION
  * NOICONIZE
  * NOZOOM

Also you may specify the combination of them you want, just doing:
<code visualfoxpro>
... STYLE nOr( WS_BORDER, WS_MAXIMIZE, ... )
</code>

These styles are defined inside INCLUDE\WINAPI.CH header file -which is automatically loaded by FiveWin.ch.-

If you want to start a MDI -Multiple interface document- window, you just have to specify the clause MDI:
<code visualfoxpro>
DEFINE WINDOW oWnd TITLE "A MDI environment" MDI

ACTIVATE WINDOW oWnd    // let's open it now in normal mode
</code>

// You may also select ACTIVATE WINDOW oWnd ICONIZED
// which will start the application as an icon.

See the source code of IDE\SOURCE\IDE.prg if you want to see how to build and properly manage MDI environments. We also supply some samples in SAMPLES\TestMdi_.prg.

MDI environments require some level of Windows expertise from the users of the application. If your customer is new to Windows, you may do better trying the standard main window way.

FiveWin will automatically control all Windows messages that it receives. But, based on a xBase syntax, you may specify certain behaviors ON some events occurring.
<code visualfoxpro>
ACTIVATE WINDOW oWnd ;

ON PAINT ... ;
ON LEFT CLICK ... ;
ON RESIZE ... ;
</code>

See FiveWin.ch for a list of all the events we support. Normally this kind of control will not be necessary, but in some circumstances you  may need it. 
Also, the main window of your application may include scrollbars. The typical Windows scrollbars on the edges of a window have to be built when defining the window:
<code visualfoxpro>
DEFINE WINDOW oWnd ... VSCROLL
</code>
or
<code visualfoxpro>
DEFINE WINDOW oWnd ... HSCROLL
</code>
or both of them
<code visualfoxpro>
DEFINE WINDOW oWnd ... VSCROLL HSCROLL
</code>

If you select these styles, you may intercept the events they will generate through these clauses:
<code visualfoxpro>
ACTIVATE WINDOW oWnd ...

ON UP ...
ON DOWN ...
ON LEFT ...
ON RIGHT ...
ON PAGEUP ...
ON PAGEDOWN ...
</code>
If you specify these styles, your window object oWnd will have defined two scrollbars objects:

oWnd:oVScroll .and. oWnd:oHScroll

So you may control and modify them directly -see scrollbars management-

To end the execution of your main window -or any other window or  DialogBox- you use the :End() method:

oWnd:End()

This tells the window object oWnd to finish working. If you specified  a VALID clause when activating the window, the VALID clause will have  to return .t. to allow ending the window. This is a typical situation:

ACTIVATE WINDOW oWnd ;

VALID MsgYesNo( "Do you want to end ?" )

During your application, if you call oWnd:End(), or the user double click the window close button, or if the user decided to end Windows,  the VALID will be executed and according to its result it will let or  not end the window.

Remember you may use oWnd:End() to end any kind of window or  DialogBox: oDlg:End().

There is no way to build the main window from resources, unless you start your application with a DialogBox:

DEFINE DIALOG oDlg RESOURCE "Main"

ACTIVATE DIALOG oDlg CENTERED

In this situation, we are loading as a main application window the dialog  box stored in resources as "main".

Use a DialogBox as your main window only when you don't need a pulldown  menu, neither a message bar or a buttonbar. Remember that normally a  DialogBox will not maximize or iconize, so plan carefully what kind  of window you may use as your main application window.

Most of the time a normal window -as the first sample above- will be perfect.
