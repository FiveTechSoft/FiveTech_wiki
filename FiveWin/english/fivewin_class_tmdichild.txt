
====== Class TMdiChild ======

MDI Child Window class                                                         
Inherits from Class TWindow                                                    







====== DATA ======
^ Data     ^ Description                              ^
|oWndClient|Client TWindow Object of the MDI structure|
|oControl|TControl object that is showed in child window|
|lKeepMenu|If the Window menu should be destroyed when the window is destroyed|
|nMenuInfo|Position where the MDI menu info should be shown|
|bPostEnd|In case of Main Window or modal dialog, the code after 'ACTIVATE WINDOW/DIALOG' is executed after the Window/dialog is closed. If we have browse in such a window or dialog, we can close the dbf table or recordset after the ACTIVATE command and this works fine. \\ \\ But in case of MDICHILD windows, the code following the ACTIVATE command is executed immediately after activating the window and we can not release the resources or close the data table after ACTIVATE command. Therefore, we write the clean up code like release of resources and closing data tables/recordset in the VALID clause of the Window. \\ \\ But this is not totally safe. There is a very small time between the data is closed in the valid clause and the window and browse are closed. If for some reason the browse needs to be refreshed in that small gap of time runtime error occurs. This issue was discussed in the forums earlier but no satisfactory solution was found. \\ \\ Now the new DATA bPostEnd of TMdiChild class provides a reliable solution to this problem. \\ \\ Instead of closing the data ( partcularly recordset ) in the VALID clause, we can do that in the codeblock oWnd:bPostEnd.|

====== METHODS ======
^Method ^ Description          ^
|New|Generic constructor method|
|Maximize|Method to maximize the child window.|
|MdiActivate|Activates the appropriate menu.|
|Restore|Method to restore the child window.|
|Activate|Make this window the active child window.|
|End|Ends the MdiChild and close it if VALID is .t.|
|Copy|Copy the selected text from the current control.|
|Cut|Cut the selected text from the current control.|
|Delete|Delete the selected text from the current control.|
|Paste|Paste into the current control.|
|Find|Finds the given text.|
|FindNext|Finds the next occurrence of the text.|
|Print|Prints the current control.|
|GotFocus|Behavior when receiving the focus|
|HandleEvent|Generic event handler.|
|Next|Selects the next MdiChild|
|Prev|Selects the prev MdiChild|
|ReSize|Behavior when resizing the MdiChild|
|KeyDown|Behavior when pressing a key|
|KeyChar|Behavior when pressing a key|
|Properties|Properties event handler.|
|Replace|Replaces the selected text in the current control.|
|SelectAll|Selects all text of the current control.|
|SetControl|Selects which control of the MdiChild has to be|
|resized|automatically|
|Center|Centers the window on his MDIFrame Window|
|SetMenu|Sets a new menu object for the window. MDI menu info|
|will|be shown at nMenuInfo position|
|SetFocus|Setfocus event handler.|
|ReDo|Redo changes on the current control.|
|UnDo|Undo changes on the current control.|
|IsZoomed|Returns .T. if the child window is maximized.|
|IsIconic|Returns .T. if the child window is iconized.|
|SetSize|Resizes the window.|
====== Example ======
\FWH\samples\TestMdi3.prg
<code clipper>
// Starting learning MDI enviroments
// First exercise

#include "FiveWin.ch"

extern Set

static oWnd

//----------------------------------------------------------------------------//

Function Main()

   local oBar

   DEFINE WINDOW oWnd FROM 1, 1 To 22, 75 ;
      TITLE "This is a MDI enviroment" MDI VSCROLL

   DEFINE BUTTONBAR oBar OF oWnd

   DEFINE BUTTON OF oBar ACTION CreateChild()

   SET MESSAGE OF oWnd TO "A message bar"

   ACTIVATE WINDOW oWnd

return nil

//----------------------------------------------------------------------------//

Function CreateChild()

   local oWndChild, oIcon
   local oBar
   local cName := "Hello"

   DEFINE ICON oIcon RESOURCE "test"

   DEFINE WINDOW oWndChild MDICHILD OF oWnd ICON oIcon

   // oWndChild:bGotFocus  = { || MsgBeep() }
   oWndChild:bLostFocus = { || MsgBeep() }

   DEFINE BUTTONBAR oBar OF oWndChild

   DEFINE BUTTON OF oBar ACTION MsgInfo( "Action" )
   DEFINE BUTTON OF oBar ACTION oWndChild:End()

   @ 3, 3 GET cName OF oWndChild SIZE 120, 25 VALID ! Empty( cName )

   oWndChild:Center()

   ACTIVATE WINDOW oWndChild VALID MsgYesNo( "Want to close it ?" )

return nil

//----------------------------------------------------------------------------//
</code>
** Screen Snapshot **

{{:mdi-2.jpg|:mdi-2.jpg}}

====== Source code ======
FWH\SOURCE\CLASSES\TMDICHILD.PRG

====== See Also ======
[[fivewin_class_tmdiframe|Class TMdiFrame]] [[fivewin_class_tmdiclient|Class TMdiClient]], [[fivewin_commands_mdi| Command MDI]]
