
====== Class TGraph ======

Graphics class                                                                 
Inherits from TControl                                                         

====== DATA ======
|l3D|Show 3D|
|lxGrid|Show grid|
|lyGrid|Show grid|
|lDotted|Grid dotted|
|lxVal|Show xValues|
|lyVal|Show yValues|
|nBarD|Deep bar|
|lTitle|Show title|
|lLegends|Show legends|
|nType|Graph type|
|cTitle|Graph title|
|cPicture|Mask values|
|aSeries|Series|
|aData|Data|
|aSTemp|Series|
|aDTemp|Data|
|aYVals|yValues|
|aYTemp|yValues|
|aFont|Title, xFont, yFont, Legends, Subtitle, xTitle,|
|yTitle,|Values|
|nClrT|Color titles|
|nClrX|Color x labels|
|nClrY|Color y labels|
|nClrL|Color legends|
|nClrV|Color values|
|nClrST|Color subtitle|
|nClrXT|Color xTitle|
|nClrYT|Color yTitle|
|nPieX|Pie graph pos|
|nPieSt|Start pie (angle)|
|nPoint|Point type|
|nBarSep|Bar separator|
|nXRanges|n Ranges|
|nValues|Pie values (Serie/Period)|
|lViewVal|View values|
|nClr|Pen color|
|hPen|Pen handle|
|hOldPen|Old pen handle|
|nPenWidth|Graph line pen width|
|lBorders|Bar borders|
|lcTitle|Center title|
|nClrGrid|Grid color|
|nClrBack|Background color|
|nClrBLeg|Back legend color|
|cBitmap|Background bitmap|
|cSubTit|Subtitle|
|cTitX|xTitle|
|cTitY|yTitle|
|lPopUp|PopUp menu|
|lSelView|Select view option|
|lSelBack|Select back option|
|nLanguage|Language (1-English, 2 Spanish, 3-...)|
|aSTitle|Shadow titles|
|lBordLeg|Legend border|
|nXMaxVal|Max value in the X axis|
|nXMinVal|Min value in the X axis|
|XY_Values|Array with XY values { {x1,y1},{x2,y2}....} |
|XY_nPenwidth|Penwith for XY lines|
|XY_nPixels|Size of the XY points|
|cXpicture|Picture of the values in the X axis|
|nXXRanges|Number of ranges in the X axis|

====== METHODS ======
|New|Constructor from source code|
|Redefine|Constructor from resources|
|Initiate|Initialize the control|
|Default|Default initialization of the control|
|Paint|Paints the control|
|Display|Displays the control|
|DrawBar|Draws a bar|
|DrawBox|Draws a box|
|DrawLine|Draws a line|
|DrawPoint|Draws a point|
|DrawPie|Draws a pie|
|DrawPoly|Draws a polyline|
|AddSerie|Adds a serie|
|SelSerie|Selects a serie|
|SetYVals|Sets yVals|
|SelPeriod|Selects a period|
|ClrShadow|Changes the shadow color|
|CountPoint|???|
|Destroy|Destroys the control|
|End|Ends the control|
|FillRect|Fills a rect|
|CreatePen|Creates a pen|
|DeletePen|Deletes a pen|
|nMax|Returns the maximum data value|
|SaveToBmp|Save graph to BMP file|
|CopyToClipBoard|Copy graph to clipboard|
|PopMenu|Popup menu options|
|Print|Print graph|
|AddXYSerie|Adds a XY serie with parameters |





====== Example 1 ======
<code clipper>
// Program : Timer test (Compilar con B.Bat : B TstTimer)
// Author  : Arteaga

#Include "Fivewin.Ch"

#Define GRAPH_TYPE_BAR   1
#Define GRAPH_TYPE_LINE  2

Static oWnd, oGraph, oTimer, aVals, nP

FUNCTION Main()

   LOCAL oReg, oIcon

   nP:=19
   aVals:=Array(20)
   Afill(aVals,0)

   DEFINE WINDOW oWnd TITLE "TGraph, timer test" FROM 0, 0 TO 8,40
   oGraph:=TGraph():New(0,0,oWnd,oWnd:nWidth()-8,oWnd:nHeight()-40)

   oGraph:cPicture := "999"
   oGraph:l3D      := .F.
   oGraph:aYVals   := {}
   oGraph:lDotted  := .F.
   oGraph:lLegends := .F.
   oGraph:lTitle   := .F.
   oGraph:lPopUp   := .T.
   oGraph:nPenWidth:= 1
   oGraph:nClrBack := CLR_BLACK
   oGraph:nClrGrid := CLR_GREEN
   oGraph:nType    := GRAPH_TYPE_LINE

   aVals[19] :=  15
   aVals[20] := 150

   oGraph:AddSerie(aVals, "", RGB(255, 255, 0))

   Define Timer oTimer Interval 900 Action Update() OF oWnd
   Activate Timer oTimer

   WndCenter(oWnd:hWnd)

   ACTIVATE WINDOW oWnd                          ;
      ON PAINT (oGraph:nWidth:=oWnd:nWidth()- 8, ;
                oGraph:nHeight:=oWnd:nHeight-40, ;
                oGraph:Refresh(.f.))

   oTimer:End()

RETURN (NIL)

Function Update(oReg)
  LOCAL aTmp :={150, 15,135, 30,120, 45,105, 60, 90, 75,;
                 75, 90, 60,105, 45,120, 30,135, 15,150 }
  LOCAL aTemp[20]
  nP--
  nP:=IF(nP=0,20,nP)
  ACopy(aVals,aTemp,2)
  aTemp[20]:=aTmp[nP]
  aVals:=AClone(aTemp)
  SysRefresh()
  oGraph:aData[1]:=aVals
  oGraph:Refresh()
RETURN (NIL)
</code>
{{:graph.jpg|:graph.jpg}}


====== Ejemplo 2 ======
<code clipper>
#include "FiveWin.ch"



#Define GRAPH_TYPE_XY_LINES   6
#Define GRAPH_TYPE_XY_POINTS  7

Static oWnd


FUNCTION Main()

  LOCAL oMenu, oFont


   MENU oMenu
      MENUITEM "&Opciones"
      MENU
         MENUITEM "Ejemplo 1 " ACTION  ejemplo( 1 )
         MENUITEM "Ejemplo 2 " ACTION  ejemplo( 2 )
         MENUITEM "Ejemplo 3 sin/cos" ACTION  ejemplo( 3 )
         MENUITEM "Ejemplo 4 ecuaci√≥n grado 2" ACTION  ejemplo( 4 )
         MENUITEM "Ejemplo 5" ACTION  ejemplo( 5 )
         SEPARATOR
         MENUITEM "&Salir"         ACTION oWnd:End()
      endmenu
   ENDMENU

   DEFINE FONT oFont NAME "MS Sans Serif" SIZE 0,-10
   DEFINE WINDOW oWnd FROM 1, 1 TO 350, 550 PIXEL MDI TITLE "TGraph" MENU oMenu

   SET MESSAGE OF oWnd TO "Class TGraph " KEYBOARD CLOCK DATE NOINSET
   SET FONT OF oWnd TO oFont

   oWnd:bKeyDown = { | nKey | if(nKey == 32 , ejemplo( 3 ) , if( nKey==27,oWnd:end() , nil )) }

      ACTIVATE WINDOW oWnd MAXIMIZED // ON INIT GraphTest()

   oFont:End()

RETURN (Nil)



// ------------------------------------------------------------------------------- //
function ejemplo( op )

   local oDlg,oChart

   define dialog oDlg title "Test" size 600,440

   oChart:=TGraph():new(  10 ,10 , oDlg, 280 , 180 )

   @ 200 , 50 button "Points" pixel action  (oChart:nType := GRAPH_TYPE_XY_POINTS , oChart:refresh() )
   @ 200 , 100 button "Lines" pixel action  (oChart:nType := GRAPH_TYPE_XY_LINES , oChart:refresh() )
   @ 200 , 150 button "Grid" pixel action  (oChart:lxGrid := !oChart:lxGrid , oChart:lyGrid := !oChart:lyGrid , oChart:refresh() )
   @ 200 , 200 button "Values" pixel action  (oChart:lXVal := !oChart:lXVal , oChart:lYVal := !oChart:lYVal , oChart:refresh() )
   @ 200 , 250 button "Cerrar" pixel action  oDlg:end()

  ACTIVATE DIALOG oDlg CENTERED  on init graph(oChart,op) valid (oChart:destroy() , .t.)



return nil

// ------------------------------------------------------------------------------ //
static function graph(oChart , op)

   do case
      case op==1
         test1(oChart)
      case op==2
         test2(oChart)
      case op==3
         sin_cos(oChart)
      case op==4
         ec_grado2(oChart)
      case op==5
         test5(oChart)

   otherwise
      msginfo("Error")
   endcase

return nil


// ------------------------------------------------------------------------------ //
static function test1(oChart )
   local aSerie1,aSerie2,aSerie3,aSerie4



   oChart:nType    :=  GRAPH_TYPE_XY_LINES
   oChart:ltitle := .t.
   oChart:cTitle := "Test"
   oChart:cTitX   := "Kilograms"
   oChart:cTitY   := "Distance"
   oChart:lXVal   :=.t.
   oChart:lYVal   :=.t.
   oChart:lxGrid   :=.t.
   oChart:lyGrid   :=.t.
   oChart:lViewVal:=.f.
   oChart:lLegends:=.t.
   oChart:lPopUp  :=.T.
   oChart:l3d  :=.f.
   oChart:cPicture := "9999"
   oChart:cXPicture := "9999"
   oChart:XY_npixels := 7
   oChart:XY_nPenwidth := 3
//   oChart:nXMaxVal := 700
//   oChart:nXMinVal         // Min Value X axis
//    oChart:nMaxVal := 1000         // Max Value Y axis
//  oChart:nMinVal         // Min Value Y axis




   aSerie1 := { {2,9.8},{4.3,3.2},{3.2,3.2},{3.4,3},{2.1,1,9},{1.8,3}  }
   aSerie2 := { {1,3},{2,2.5},{4.8,3.6},{1.2,5.2},{2.4,3},{4.1,1,9},{3.8,3}  }
   aSerie3 := { {1.5,2},{3,8},{2,2.6},{2.3,3},{1,3},{1,4.6}  }
   aSerie4 := { {2.5,2.5},{3.8,2},{3,5.6},{1.3,3},{2,4},{2,5.6}  }


   oChart:AddXYSerie(  aSerie1 , "Serie 1",RGB(128,128,255) , GRAPH_TYPE_XY_LINES ) // always lines
   oChart:AddXYSerie(  aSerie2 , "Serie 2",RGB(255,0,0), GRAPH_TYPE_XY_POINTS ) // always points
   oChart:AddXYSerie(  aSerie3 , "Serie 3",RGB(0,255,0) ) // lines or points acording to oChart:nType
   oChart:AddXYSerie(  aSerie4 , "Serie 4",RGB(255,255,0) ) // lines or points acording to oChart:nType
 // ... serie, 4 etc

   oChart:refresh()

return nil


// ------------------------------------------------------------------------------ //
static function test2(oChart )
   local aSerie1,aSerie2,aSerie3,aSerie4,aserie5



   oChart:nType    :=  GRAPH_TYPE_XY_LINES
   oChart:ltitle := .t.
   oChart:cTitle := "Test"
   oChart:cTitX   := "Kilograms"
   oChart:cTitY   := "Distance"
   oChart:lXVal   :=.t.
   oChart:lYVal   :=.t.
   oChart:lxGrid   :=.t.
   oChart:lyGrid   :=.t.
   oChart:lViewVal:=.f.
   oChart:lLegends:=.t.
   oChart:lPopUp  :=.T.
   oChart:l3d  :=.f.
   oChart:cPicture := "9999"
   oChart:cXPicture := "9999"
   oChart:XY_npixels := 7
   oChart:XY_nPenwidth := 3
   oChart:nXMaxVal := 700
   // oChart:nXMinVal         // Min Value X axis
    oChart:nMaxVal := 1000         // Max Value Y axis
//  oChart:nMinVal         // Min Value Y axis


   aSerie1 := { {0,0},{20,200},{22,190},{90,600},{92,550},{150,800},{180,900},{200,950},{250,850},{690,880}  }


   oChart:AddXYSerie(  aSerie1 , "Serie 1",RGB(0,0,255) ) // lines or points acording to oChart:nType


   oChart:refresh()

return nil


// ------------------------------------------------------------------------------ //
static function sin_cos(oChart )
   local aSerie1,aSerie2,aSerie3,aSerie4,aserie5
   local x



   oChart:nType    :=  GRAPH_TYPE_XY_LINES
   oChart:ltitle := .t.
   oChart:cTitle := "Sin/Cos"
   oChart:cTitX   := "Units"
   oChart:cTitY   := "Degrees"
   oChart:lXVal   :=.t.
   oChart:lYVal   :=.t.
   oChart:lxGrid   :=.t.
   oChart:lyGrid   :=.t.
   oChart:lViewVal:=.f.
   oChart:lLegends:=.t.
   oChart:lPopUp  :=.T.
   oChart:l3d  :=.f.
   oChart:cPicture := "99.9"
   oChart:cXPicture := "999"
   oChart:XY_npixels := 7
   oChart:XY_nPenwidth := 3
   oChart:nXMaxVal :=  359
   oChart:nXMinVal :=  0        // Min Value X axis
   oChart:nMaxVal := 1         // Max Value Y axis
   oChart:nMinVal := -1         // Min Value Y axis


   aSerie1 := {}
   aSerie2 := {}

   for x := 0 to 359
      aadd( aSerie1 , { x , sin( DegToRad( x ) )  } )
      aadd( aSerie2 , { x , cos( DegToRad( x ) )  } )
   next x

// xbrowse(aSerie1)

   oChart:AddXYSerie(  aSerie1 , "sin",RGB(0,0,255) ) // lines or points acording to oChart:nType
   oChart:AddXYSerie(  aSerie2 , "cos",RGB(255,0,0) ) // lines or points acording to oChart:nType

   oChart:refresh()

return nil


// ------------------------------------------------------------------------------ //
static function ec_grado2(oChart )
   local aSerie1,aSerie2,aSerie3,aSerie4,aserie5
   local x
   local a1 := 8
   local b1 := 3
   local c1:= -10
   local a2 := -7
   local b2 := 5
   local c2:= +10



   oChart:nType    :=  GRAPH_TYPE_XY_LINES
   oChart:ltitle := .t.
   oChart:cTitle := "Ec_grado2 - y=ax2+bx+c"
   oChart:cTitX   := "Y_Units"
   oChart:cTitY   := "X_Units"
   oChart:lXVal   :=.t.
   oChart:lYVal   :=.t.
   oChart:lxGrid   :=.t.
   oChart:lyGrid   :=.t.
   oChart:lViewVal:=.f.
   oChart:lLegends:=.t.
   oChart:lPopUp  :=.T.
   oChart:l3d  :=.f.
   oChart:cPicture := "9999.9"
   oChart:cXPicture := "9999.9"
   oChart:XY_npixels := 7
   oChart:XY_nPenwidth := 3
 //  oChart:nXMaxVal := 2
 //  oChart:nXMinVal :=  -2        // Min Value X axis
//   oChart:nMaxVal := 1         // Max Value Y axis
//   oChart:nMinVal := -1         // Min Value Y axis




   aSerie1 := {}
   aSerie2 := {}

   for x := -5 to 5 step .2
      aadd( aSerie1 , { x , a1*x**2+b1*x+c1  } )  // y=ax2+bx+c
      aadd( aSerie2 , { x , a2*x**2+b2*x+c2  } )  // y=ax2+bx+c
   next x

// xbrowse(aSerie1)

   oChart:AddXYSerie(  aSerie1 , "y=8x2+3x-10",RGB(0,0,255) )
   oChart:AddXYSerie(  aSerie2 , "y=-7x2+5x+10",RGB(255,0,0),GRAPH_TYPE_XY_POINTS )

   oChart:refresh()

return nil

// ------------------------------------------------------------------------------ //
static function test5(oChart )
   local aSerie1,aSerie2,aSerie3,aSerie4,aserie5



   oChart:nType    :=  GRAPH_TYPE_XY_LINES
   oChart:ltitle := .t.
   oChart:cTitle := "Test"
   oChart:cTitX   := "Kilograms"
   oChart:cTitY   := "Distance"
   oChart:lXVal   :=.t.
   oChart:lYVal   :=.t.
   oChart:lxGrid   :=.t.
   oChart:lyGrid   :=.t.
   oChart:lViewVal:=.f.
   oChart:lLegends:=.t.
   oChart:lPopUp  :=.T.
   oChart:l3d  :=.f.
   oChart:cPicture := "99.9"
   oChart:cXPicture := "99.9"

   oChart:XY_nPenwidth := 3
   oChart:nXMaxVal := 1.1
   oChart:nXMinVal := -.2
   oChart:nMaxVal := 1.1
   oChart:nMinVal := -.2


   oChart:XY_npixels := 20

   aSerie1 := { {0.08,0.18},{0,.45},{.02,0.8},{0,.45},{.55,.4},{.62,0},{.55,.4},{.85,.8},{1,.5},{.85,.8},{.6,1}  }


   oChart:AddXYSerie(  aSerie1 , "Serie 1",RGB(0,0,255) ) 
   oChart:AddXYSerie(  aSerie1 , "Serie 2",RGB(0,0,255) , GRAPH_TYPE_XY_POINTS )

   oChart:refresh()

return nil


// ------------------------------------------------------------------------------- //
static function DegToRad( x )
return x*PI()/180


</code>
{{:tgraph_test1.jpg|:tgraph_test1.jpg}}
{{:tgraph_test2.jpg|:tgraph_test2.jpg}}
{{:tgraph_test3_sin_cos.jpg|:tgraph_test3_sin_cos.jpg}}
{{:tgraph_test4_ecuacion_grado2.jpg|:tgraph_test4_ecuacion_grado2.jpg}}
{{:tgraph_test5.jpg|:tgraph_test5.jpg}}



====== See Also ======
[[fivewin_commands_graphs | Command Graph]]

====== Source code ======
FWH\SOURCE\CLASSES\TGRAPH.PRG